_http_query_string_sanitize()
{
	[ "$REQUEST_METHOD" = "POST" ] && {
		[ ${CONTENT_LENGTH:-0} -eq 0 ] || {
			read -n $CONTENT_LENGTH POST
			QUERY_STRING="${QUERY_STRING:+&}${POST}"
		}
	}

	[ -z "$QUERY_STRING" ] && return

	# 1) now we have joined POST+GET in one string 
	# 2) special characters like %20 (space) must be decoded (httpd -d)
	# 3) hide all single-quotes (') by escaping them from shell
	# 4) delete all '&'/'$'-signs and append a single-quote + pipe to /dev/null + newline
	# 5) now we have a de-serialized query-string and each line looks like
	#    VARNAME=VALUE' >/dev/null 2>/dev/null;
	# 6) replace the first equal-sign with =' , now we have in each line
	#    VARNAME='VALUE' >/dev/null 2>/dev/null;
	# 7) varname must only consist of "a-z A-Z 0-9 _" (no spaces), all other things are deleted

	/usr/sbin/*httpd -d "$QUERY_STRING" 2>/dev/null |
	 sed  -e "s/'/'\\\''/g" \
	      -e "s/&/' >\/dev\/null 2>\/dev\/null;\n/g" \
	      -e "s/$/' >\/dev\/null 2>\/dev\/null;\n/" |
	  sed -n "s/^\([a-zA-Z0-9_]*\)=\(.*\)/\1='\2/p"

	# fixme! allow separator ; and & for dividing vars

	# fixme! check: "The equals sign may be omitted if the value is an empty string"

	# fixme! values cant have ? or & inside,
	#	 because we first decode and then split

	# fixme! automatically build php-style array[] -> array=$array $value ...
	#	 sed -ne 's/^\([a-zA-Z0-9]*\)\[]=\(.*\)/\1=${\1}\2 #/'

	# fixme! security: detect IFS-change

	# here we do the same for our ENV-variables, so user can't overwrite/inject special vars
	# hole output of this function can be used like:
	#
	# eval "$( _http query_string_sanitize )"

	/usr/bin/env |
	 sed -e "s/'/'\\\''/g" \
	     -e "s/=/='/" \
	     -e "s/$/' >\/dev\/null 2>\/dev\/null; /"
}

_http_query_string_group2list()		# outputs a list for iterating, formed from all vars beginning with GROUP
{					# e.g. myform_checkbox_1="foo" myform_checkbox_5="bar" -> 1 5
	local GROUP="$1"

	echo "$QUERY_STRING" |
	 sed "s/${GROUP}\([0-9a-zA-Z]*\)/\n\1#\n/g" |
	  sed -n '/#$/s/^\(.*\)#/\1/p'
}

_http_url_get_serverstring()
{
	echo "$1" | sed -n 's|^http://\([a-zA-Z0-9\.-]*\)/.*$|\1|p'	# http://bla.com/blubb -> bla.com
}

_http_header_mimetype_output()
{
	local MIME="$1"
	local ATTACHMENT="$2"				# filename

	if [ -z "$ATTACHMENT" ]; then
		echo -en "Content-type: $MIME\n\n"	# ARG1 = e.g. text/html
	else
		echo -en "Content-type: $MIME\nContent-Disposition: attachment; filename=\"$ATTACHMENT\"\n\n"
	fi
}

_http_spoof_captive_portal_checker_microsoft()
{
	_http header_mimetype_output "text/plain"

	echo -n "Microsoft NCSI"
}
