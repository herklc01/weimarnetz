#!/bin/sh
# shellcheck disable=SC2039

_vpn_needed()
{
	[ -z "$INETOFFER" ] && INETOFFER="$( _net local_inet_offer )"

	[ "$INETOFFER" = "false" ] && {
		_log it $FUNC daemon debug "no local default gateway - abort"
		return 1
	}

	[ "$( uci -q get meshnode.vpn.disabled )" -eq "1" ] && {
		_log it $FUNC daemon debug "vpn disabled by config - abort"
		return 1
	}
	return 0
}

_vpn_start ()
{
	local FUNC='vpn_start'
	local LOCKFILE='/tmp/VPN_LOCK'

	lock -n $LOCKFILE || return 1

	unlock() { 
		lock -u $LOCKFILE
	}
	_vpn_defer_start && { 
		unlock
		return 1
	} 
	_vpn needed || {
		unlock
		return 1
	} 
	_vpn_build_vars || {
		unlock
		return 1
	}  

	[ -n "$SERV" ] || {
		_log it $FUNC daemon debug "no suitable server found"
		unlock
		return 1	
	}
	
	[ -n "$PORT" ] || {
		_log it $FUNC daemon debug "no server with suitable vtun setup found for you, please try again later"
		unlock 
		return 1	
	}
	
	[ -z "$NODE_NUMBER" ] && {
		_log it $FUNC daemon debug "node not configured yet - abort"
		unlock
		return 1
	}
		
	_vpn_remove_vtun_conf
	_vpn_write_vtun_conf
	_vpn_tunnel_start
}

_vpn_stop ()
{
	local LOCKFILE='/tmp/VPN_LOCK'
	_vpn_remove_vtun_conf
	_vpn_tunnel_stop
	lock -u $LOCKFILE 
	
}

_vpn_restart ()
{
	_vpn_stop
	_vpn_start
}

_vpn_tunnel_stop ()
{
	local FUNC="vpn_tunnel_stop"
	
	pidof vtund >/dev/null && {

		_log it $FUNC daemon debug "killing tunnel-daemon"		
		killall vtund
		sleep 2
	
		pidof vtund >/dev/null && {

			_log it $FUNC daemon debug "daemon still alive, trying hard"
			killall -9 vtund
			sleep 2
			
			pidof vtund >/dev/null && {

				_log it $FUNC daemon debug "daemon still alive - error"
			}
		}
	}
}

_vpn_tunnel_start ()
{
	local FUNC="vpn_tunnel_start"
	[ ! -e "$VTUN" ] && {
		_log it $FUNC daemon debug "no configfile - abort"
		return
	}
	
	
	_log it $FUNC daemon debug "starting vtun with config '$VTUN $SERV $PORT'"

	vtund -f "$VTUN" -P "$PORT" "Node$KNOT" "$SERV" 2>/dev/null || {

		_log it $FUNC daemon debug "error vtun missing or problem"	
		return 1	# cron trys later a vpn-restart
	}
}

_vpn_write_vtun_conf()
{
	local func="vpn_write_vtun_conf"
	local LINE=""
	local particpant_net="10.63.0.0/16"			# fixme! hardcoded
	local kalua_roaming_net="100.64.0.0/10"
	local mytable="weimarnetz_anonym"
	local VPN_SERVER_IP="$(_net dns2ip $VPN_SERVER)"
	local lanvpn="$( uci -q -get meshnode.vpn.lan_vpn )"
	local lan_rule=''

	if [ "$lanvpn" -eq "1" ]; then 
		lan_rule='#'
	else 
		lan_rule=''
	fi
		
	cat > "$VTUN" <<EOF
Node$KNOT {
	passwd ff ;
	type ether ;		# fixme! olsrd-bug: /32 interface needed?
	persist yes ;		# fixme! add 'timeout 60' ?

	up {
		program "logger -p daemon.info -t vtund.conf link_up %%:$HOSTNAME" ;

		program "ip address add $WIFIVPNCLIENTADR/$WIFIVPNPRE dev %% " wait ;
		program "sleep 10" wait;
		program "ip address add $WIFIVPNCLIENTADR/32 dev %%" wait;
		program "ip -6 address add $VPN6ADR/$VPN6MSK dev %%" wait;
		program "ip link set dev %% mtu $MTU up" wait;
		program "# ip route add $VPN_SERVER_IP via $STATIC_ROUTE" wait;		# + table local?

		program "grep -q $mytable /etc/iproute2/rt_tables || echo 50 $mytable >>/etc/iproute2/rt_tables" wait;
		program "ip rule add from $particpant_net prio 30010 table $mytable" wait;
		program "ip rule add from $kalua_roaming_net prio 30020 table $mytable" wait;

		# dont send packets to private networks over vpn
		program "ip rule add to 169.254.0.0/24 prio 30005 lookup main" wait;
		program "ip rule add to 10.0.0.0/8     prio 30004 lookup main" wait;
		program	"ip rule add to 100.64.0.0/10  prio 30001 lookup main" wait;
		program "ip rule add to 192.168.0.0/16 prio 30003 lookup main" wait;
		program "ip rule add to 172.16.0.0/12  prio 30002 lookup main" wait;
		program "ip rule add to $particpant_net prio 30001 lookup main" wait;
		program "$lan_rule ip rule add from $LANNET/$LANPRE prio 30000 table main" wait;
		program "ip route add default via $WIFIVPNSERVERADR dev %% table $mytable" wait;

		program "ip route flush cache" wait;
	} ;
		# fixme! static_route must only be valid for programs on this machine
	down {
		program "logger -p daemon.info -t vtund.conf link_down %%:$HOSTNAME" ;

		# ordering vice versa (see above)
		program "ip route del default via $WIFIVPNSERVERADR dev %% table $mytable" wait;
		program "$lan_rule ip rule del from $LANNET/$LANPRE prio 30000 table main" wait;
		program "ip rule del to $particpant_net prio 30001 lookup main" wait;
		program "ip rule del to 100.64.0.0/10  prio 30001 lookup main" wait;
		program "ip rule del to 172.16.0.0/12  prio 30002 lookup main" wait;
		program "ip rule del to 192.168.0.0/16 prio 30003 lookup main" wait;
		program "ip rule del to 10.0.0.0/8	   prio 30004 lookup main" wait;
		program "ip rule del to 169.254.0.0/24 prio 30005 lookup main" wait;

		program "ip rule del from $kalua_roaming_net prio 30020 table $mytable" wait; 
		program "ip rule del from $particpant_net prio 30010 table $mytable" wait;					  
		program "ip link set dev %% down" wait;
	} ;
}
EOF

	_log it $func daemon debug "ready"
	#while read LINE; do {
    #		_log it $func daemon debug "${VTUN} +'$LINE'"
	#} done <"$VTUN"
}

_vpn_remove_vtun_conf ()
{
	local FUNC="vpn_remove_vtun_conf"

	[ -e "$VTUN" ] && {
		_log it $FUNC daemon debug "working"
		rm "$VTUN"
	}
}

_vpn_defer_start ()
{
	DIRTY=
	[ "$( uci -q get meshnode.vpn.disabled )" = "1" ] && DIRTY="VPN disabled"
	[ -e "/tmp/LOWMEM" ]				&& DIRTY="lowmem"
	[ -n "$FAILSAFE" ]				&& DIRTY="failsafe"
	[ -n "$READONLY" ]				&& DIRTY="readonly"

	[ -n "$DIRTY" ] && {
		_log it init daemon debug "call: '$1' - abort: '$DIRTY'"
		return 0
	}
	return 1
}

_vpn_probe_vtund_type ()
{
	set -- $( ldd /usr/sbin/vtund )

	case "$@" in
		*'liblzo'*'libcrypto'*)
			echo "ssl_lzo"
		;;
		*'liblzo'*)
			echo "nossl_lzo"
		;;
		*)
			echo "nossl_nolzo"
		;;
	esac
}

_vpn_build_vars()
{
	local FUNC="vpn_build_vars"

	. /usr/share/libubox/jshn.sh		# OpenWrt JSON-helpers

	DOMAIN="$( uci -q get meshnode.vpn.domain )"	# e.g. 'weimarnetz.de'
	PREFIX="$( uci -q get meshnode.vpn.prefix )"	# e.g. 'vpn'
	JSONPATH="$( uci -q get meshnode.vpn.jsonpath )"	# e.g. '/freifunk/vpn/'
	VTUNDTYPE="$( _vpn probe_vtund_type )"		# e.g. 'nossl_nolzo'
	local TABLE=

	for i in 1 2 3 4 5 6 7 8 9 10; do
		HOST="${i}.${PREFIX}.${DOMAIN}"
		URL="http://${HOST}${JSONPATH}"

		if ! JSON=$( _curl it "${URL}" 2>/dev/null ); then
			_log it ${FUNC} daemon err "error fetching ${URL}"
		else
			json_cleanup	# json_get_var variables are not cleaned otherwise.
			json_load "${JSON}" 2>/dev/null
			SERVER=	   json_get_var SERVER server
			CLIENTS=-1 json_get_var CLIENTS clients
			MTU=-1	   json_get_var MTU maxmtu
			PORT=-1	   json_get_var PORT port_vtun_${VTUNDTYPE}

			_net tcp_port_reachable "$SERVER" "$PORT" || PORT=-1

			vars_are_sane()
			{
				test -n "$SERVER" -a "$CLIENTS" -ge 0 -a "$MTU" -ge 0 -a "$PORT" -ge 0 2>/dev/null
			}

			if vars_are_sane; then
				_log it ${FUNC} daemon notice "got ${SERVER}"

				# here we build a long string:
				# each valid varset is a small mini-shell-script (eval-able)
				# and (with a space) appended to the next one. later we choose only 1 entry.
				TABLE="${TABLE}PING=$PING;NUMBER=$i;CLIENTS=$CLIENTS;MTU=$MTU;PORT=$PORT;SERVER=$SERVER "
			else
				_log it ${FUNC} daemon err "error: invalid data on ${URL}"
			fi
		fi
	done

	# no vpn, then exit early
	[ -z "$TABLE" ] && return 1

	# get a random VPN entry
	eval $( _list random_element "$TABLE" )


	VPN_SERVER="${SERVER}"

	_log it ${FUNC} daemon notice "using ${VPN_SERVER} - ping: ${PING}ms  clients: ${CLIENTS}	port: ${PORT}  mtu: ${MTU}"
	NODE_NUMBER="$( uci -q get meshnode.settings.nodenumber )"
	HOSTNAME="$( uci -q get system.@system[0].hostname )"
	[ -z "${HOSTNAME}" ] && HOSTNAME="node${NODE_NUMBER}"
	SERV="${VPN_SERVER}"	# _ip4|_ip6 fallback?
	CONF="/var/etc/olsrd.conf"			# old_style
	KNOT="${NODE_NUMBER}"
	VTUN="/tmp/vtund.conf"

	[ "${1}" != "stop" ] && INETOFFER="$( _net local_inet_offer )"
	
	eval "$( _ipsystem get )"
}
# vim: set filetype=sh ai noet ts=4 sw=4 sts=4 :
