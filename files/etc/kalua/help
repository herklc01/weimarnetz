#!/bin/sh

_help_overview()
{
	local ram_size=$( _system ram_size )
	ram_size="$( _sanitizer run "$ram_size" number_humanreadable )"

	cat <<EOF
welcome onboard, this is a '$HARDWARE'
equipped with ~$ram_size Kb RAM and ~$( _system flash_size) Kb flash
and the network-switch looks like: '$( _switch show )'

interface-configuration:
EOF
	_help list_interfaces
	_help build_distrib_vars

	cat <<EOF

we are running $DISTRIB_ID/Linux ($DISTRIB_RELEASE/$DISTRIB_REVISION)
with kernel '$( uname -r )' on architecture '$( _system architecture )'
you can explore the system with some functions:

begin with '_' (just an underscore) and go further
with e.g. '_system'. if you need more help,
type e.g. _help '_system load'

systemlog is available via 'logread' and 'logread -f' and
bad errors are found with 'cat \$PERMLOG'.

also visit: https://github.com/weimarnetz/weimarnetz
            https://github.com/bittorf/kalua
	    https://weimarnetz.de 

# show active users:
_netfilter user_list verbose
EOF

	test -n "$WIFIDEV" && cat <<EOF

# start the WiFi-scanner:
iw phy phy0 interface add MON type monitor; horst -i MON; iw dev MON del
EOF
}

_help_build_distrib_vars()
{
	export DISTRIB_REVISION DISTRIB_ID DISTRIB_RELEASE

	if   [ -e '/etc/lsb-release' ]; then
		. /etc/lsb-release
		DISTRIB_REVISION="$DISTRIB_DESCRIPTION"
	elif [ -e '/etc/debian_version' ]; then
		read -r DISTRIB_REVISION </etc/debian_version	# 6.0.10
		DISTRIB_ID='Debian'
		DISTRIB_RELEASE='???'
	elif [ -e '/etc/openwrt_release' ]; then
		. /etc/openwrt_release
	else
		DISTRIB_ID='???'	# OpenWrt | LinuxMint
		DISTRIB_RELEASE='???'	# Bleeding Edge | 17.3
		DISTRIB_REVISION='???'	# r49083 | <empty>
	fi
}

_help_list_interfaces()
{
	local line ifname interface ipaddr netmask cidr proto message ssid channel

	uci show network | grep '=interface'$ | while read -r line; do {
		line="${line%=*}"		# network.lan=interface -> network.lan
		interface="${line#*.}"		# network.lan -> lan
		ifname="$( uci -q get $line.ifname || ifstatus "$interface" | grep -F '"device": "' | cut -d'"' -f4 )"
		[ -z "$ifname" ] && ifname='(not_up)'
		proto="$( uci -q get network.$interface.proto )"

		case "$ifname" in
			'@'*|'lo')
			;;
			*)
				case "$proto" in
					'pppoe')
						ipaddr="$( ifstatus "$interface" | grep -F '"address": "' | cut -d'"' -f4 )"
						netmask='255.255.255.255'
						cidr='32'
					;;
					*)
						ipaddr="$(  uci -q get $line.ipaddr   )"
						netmask="$( uci -q get $line.netmask  )"
						cidr="$( _net mask2cidr "$netmask" )"
					;;
				esac

				if [ -n "$ipaddr" ]; then
					message="$ipaddr/$cidr (=$netmask)"
				else
					message='unconfigured (no IPv4)'
				fi

				_net dev_is_valid "$ifname" && ifname="$ifname = $( _wifi dev2driver "$ifname" )"

				if _wifi get "$interface" check; then
					channel="$( _wifi get "$interface" channel )"
					ssid="$(    _wifi get "$interface" ssid    )"
					echo "$interface/$ifname: ${proto:-static} - $message - channel: $channel SSID: $ssid"
				else
					echo "$interface/$ifname: ${proto:-static} - $message"
				fi
			;;
		esac
	} done
}
