#!/bin/sh

# we need a monotonic counter for both: SCHEDULER / SCHEDULER_IMPORTANT
# with 8 digits -> max = 1157 days; note: var PID is the uptime
PID=;read -r PID _ </proc/uptime
SCHEDULER=${SCHEDULER-/tmp/SCHEDULER/job_$(printf %08.0f ${PID%.*}; mkdir -p /tmp/SCHEDULER)}
SCHEDULER_QUEUE='/tmp/SCHEDULER/*'
SCHEDULER_IMPORTANT=${SCHEDULER_IMPORTANT-/tmp/SCHEDULER/important_$(printf %08.0f $$)}
SCHEDULER_IMPORTANT_QUEUE='/tmp/SCHEDULER/important_*'

# TODO: start task @specific time (e.g. "in 32mins")

_scheduler_queue_purge()
{
	_log it purge_queues daemon info "removing"
	rm $SCHEDULER_QUEUE

	return 0
}

_scheduler_queue_list()
{
	local funcname="scheduler_list_queue"
	local option="$1"
	local empty1 empty2

	_log it $funcname daemon debug "working with option: '$option'"

	echo "# actual,running queue: /tmp/scheduler.log"
	cat '/tmp/scheduler.log' 2>/dev/null || {
		echo -en "# empty!\n\n"
		empty1="true"
	}

	echo -en "\n# waiting queue: (important + normal)\n"
	cat $SCHEDULER_QUEUE 2>/dev/null || {
		echo -en "# empty!\n\n"
		empty2="true"
	}

	[ "$option" = "is_empty" ] && {
		if [ "${empty1}${empty2}" = "truetrue" ]; then
			return 0
		else
			return 1
		fi
	}
}

_scheduler_print_usage()
{
	:
}

_scheduler_wait_till_cpuload_is_low()
{
	local funcname='scheduler_wait_till_cpuload_is_low'
	local task="$1"
	local pause=23

	bool_true 'system.@monitoring[0].ignore_load' && return 0
	_weblogin authserver is_myself && return 0
	[ -e '/tmp/cron.webcam' ] && return 0

	LOAD=
	while _system load 1min quiet; test $LOAD -gt 80 ; do {
		_log it $funcname daemon info "PID: $$ - load: $LOAD - waiting $pause sec for '$task'"
		sleep $pause
		[ $( _system uptime sec ) -lt 3600 ] && return 0
	} done
}

_scheduler_allow_run()
{
	local funcname='scheduler_allow_run'
	local lockfile="$1"

	[ -e "$lockfile" ] || return 0
	[ -e "$TMPDIR/$funcname" -o -e "/tmp/$funcname" ] && return 0		# override: FIXME!

	if [ $( _stopwatch stop "$lockfile.start" interim,nolog,seconds ) -gt 3600 ]; then
		_log it $funcname daemon alert 'removing lockfile, which seems to be left by accident'
		rm "$lockfile" "$lockfile.start"
		return 0
	else
		_log it $funcname daemon info "will not allow, see lockfile '$lockfile'"
		return 1
	fi
}

_scheduler_run()
{
	local funcname='scheduler_run'
	local file line strong_debug lastpart without_first_underliner first_word without_first_underliner age length
	local logfile='/tmp/scheduler.log'
	local newline='
'
	_scheduler allow_run "$logfile" || return 1
	touch "$logfile" '/tmp/scheduler.mark_starttime'

	case "$CONFIG_PROFILE" in
		liszt28*)
			[ -z "$LOWMEM" -a $OPENWRT_REV -gt 0 ] && strong_debug='true'
#			[ -e '/tmp/LOG_FIRST_RUN' ] && { rm '/tmp/LOG_FIRST_RUN'; LOG_FIRST_RUN=1; }
		;;
	esac

	# SCHEDULER_QUEUE includes IMPORTANT (e.g. important_*) and
	# NORMAL job-queue (e.g. job_*) - via globbing *i*mportant comes before *j*ob
	for file in $SCHEDULER_QUEUE; do {
		[ -e "$file" ] || continue	# empty queue, so globbing does not expand

		while read -r line; do {
#			[ -n "$LOG_FIRST_RUN" ] && echo "$(cat /proc/uptime): $line" >>/tmp/LOG_FIRST_RUN.txt
			if grep -sq ^"$line"$ "$logfile"; then
				# we only execute the LAST occurrence of a job,
				# so we get more recent values/data
				_log it $funcname daemon debug "ignoring twin '$line'"
			else
				case "$line" in
					'_'*)   # seems like a kalua-function, e.g. _vpn_adduser argX
						case "$line" in
							*' '*' '*)
								# e.g. '_sms_send bla blubb' = 2 spaces or more
								without_first_underliner="${line#_}"		# sms_send bla blubb
								first_word="${without_first_underliner%_*}"	# sms

								if [ -e "/etc/kalua/$first_word" ]; then
									_log it $funcname daemon info "2 spaces, needs rewrite: line: '$line'"
									lastpart="${without_first_underliner#*_}"	# send bla blubb
									line="_$first_word $lastpart"
									_log it $funcname daemon info "2 spaces, rewrote: '$line'"
								else
									_log it $funcname daemon debug "rewrite unneeded: '$line'"
								fi
							;;
							*' '*)
								# OK: has a 'space' e.g. '_system load'
							;;
							*)
								# e.g. '_netfilter_splash_autoadd' -> '_netfilter splash_autoadd'

								# needs rewrite, replace second '_' with a 'space'
								without_first_underliner="${line#_}"
								line="_${without_first_underliner/_/ }"		# replace 1st occurrence
							;;
						esac
					;;
				esac

				case "$line" in
					*"$newline"*)
						# likely an error
						strong_debug='true'
					;;
				esac

				# FIXME! how can it happen that we have invalid lines, e.g:
				# _db user device add '83
				# TODO: how to check if the line is valid?
				case "$strong_debug" in
					'true')
						echo "$line" >"$logfile.debug"
						sh -n "$logfile.debug" || {
							_log it $funcname daemon alert "bad line: $line"
							line='true'
						}
					;;
				esac

				echo "$line" >>"$logfile"
				_scheduler wait_till_cpuload_is_low "$line"
				_stopwatch start "$logfile.start" global
				_log it $funcname daemon debug "[START] '$line'"
#				_stopwatch start '/tmp/PROFILER'
				case "$line" in
					# first 2 are: arguments in quotation marks
					*" '"*|*' "'*|*'|'*|*'<'*|*'>'*|*';'*|*' && '*|*' || '*)
						# TODO: debug mode also here?
						eval $line
					;;
					*)
						# TODO: if '$line' leads to a 'Segmentation fault' this breaks here
						case "$strong_debug" in
							'true')
								set -x
								$line 2>>"$logfile.debug"
								set +x
							;;
							*)
								$line
							;;
						esac
					;;
				esac
#				local time=$( _stopwatch stop '/tmp/PROFILER' nolog )
#				echo "$line - $time" >>'/tmp/PROFILER.data'

				_log it $funcname daemon debug "[READY] '$line'"
				_watch coredump "after: $line"

				case "$line" in
					'_firmware check_forced_upgrade'|'_firmware burn')
						_log it $funcname daemon info "[OK] premature exit after '$line'"
						break
					;;
				esac
			fi
		} done <"$file"
		rm "$file" 2>/dev/null

		_file age '/tmp/scheduler.mark_starttime' -gt 60 && {
			# keep it running without pause till last init-scripts's job was done
			[ -e "$TMPDIR/scheduler_keep_running" ] || {
				length=0
				for _ in $SCHEDULER_QUEUE; do test -e "$_" && length=$(( length + 1 )); done

				# otherwise maybe 'IMPORTANT' jobs must wait too long
				[ $length -gt 0 ] && {
					age="$( _file age '/tmp/scheduler.mark_starttime' sec )"
					_log it $funcname daemon info "[OK] aborting run, age: $age sec - $length jobs in queue"
				}

				break
			}
		}
	} done

	rm "$logfile"
}
