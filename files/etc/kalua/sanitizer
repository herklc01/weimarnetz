#!/bin/sh

# ToDo:
# - integer
#   - shortint
#   - integer
#   - longint
#   - unsigned
#   - range -500...+800	(round to min or max, or check)
# - ip6
#
# fixme! use POSIX style for function/arg names, e.g. 'digit' = numeric 'xdigit' = hex ... -> POSIX Character Classes
#

_sanitizer_run()	# example_call: _sanitizer run "$MYSTRING" mac hex lowercase check
{			#               _sanitizer run "$MYSTRING" length:24
	local INPUT="$1"
	local WORK="$1"
	local KEYWORD OPTION

	[ -z "$INPUT" ] && return 1

	while [ -n "$2" ]; do {
		KEYWORD="$2"
		OPTION=

		[ "${KEYWORD#*:}" = "$KEYWORD" ] || {
			OPTION="${KEYWORD#*:}"		# cut string after  "_", e.g.: string "keyword_option" -> string "option"
			KEYWORD="${KEYWORD%[:]*}"	# cut string before "_", e.g.: string "keyword_option" -> string "keyword"
		}

		case "$KEYWORD" in
			'check')
				if [ "${WORK:-dummy}" = "$INPUT" ]; then
					return 0
				else
					return 1
				fi
			;;
			*)							# hex|lowercase|uppercase|email|urlvalue|mac|alphanum
				WORK="$( _sanitizer $KEYWORD "$WORK" "$OPTION" )" || {
					_log it sanitizer_$KEYWORD daemon alert "[ERR] data: '$WORK' opt: '$OPTION' input: '$INPUT'"
					return 1
				}
			;;
		esac

		shift
	} done

	echo -n "$WORK"
}

_sanitizer_mobilenumber()	# SENSE: cell phone number
{
	local NUMBER="$1"

	echo "$NUMBER"
	return 0

	case "$NUMBER" in		# fixme!
		"+49")		# http://stackoverflow.com/questions/123559/a-comprehensive-regex-for-phone-number-validation
			:	# http://stackoverflow.com/questions/41925/is-there-a-standard-for-storing-normalized-phone-numbers-in-a-database
		;;		# idea: let the user choose via form: country/network/number
	esac

	case "$NUMBER" in
		0170*|0171*|0176*|0179*)
			:
		;;
	esac
}

_sanitizer_firstword()		# space is fieldseparator
{
	local LINE="$1"
	local WORD

	for WORD in $LINE; do {
		echo $WORD
		break
	} done
}

_sanitizer_firstline()
{
	local FIRSTLINE=$1	# without quotes

	echo -n $FIRSTLINE
}

_sanitizer_number_humanreadable()	# 1500000000 -> 1.500.000.000
{
	echo "$1" | sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1\.\2/;ta'
}

_sanitizer_strip_newlines()
{
	local LINE

	echo "$1" | while read -r LINE; do echo -n "$LINE"; done
}

_sanitizer_newlines2spaces()
{
	local line out

	if [ -n "$1" ]; then
		out="$( echo "$1" | while read -r line; do echo -n "$line "; done )"
		echo "$out" | cut -b 1-$(( ${#out} -1 ))
	else
		echo "$1"
	fi
}

_sanitizer_ip4()	# testcase: "1a 1.2.3. 11.12.a.1 523.234.157.254 45.32.0.1 1.2.3.4.5 a1 178.24.108.0"
{			# fixme! catch an IP even in strings embedded: e.g. "OK-10.11.12.13-BLA"
	local args="$*"	# fixme! 178.24.108.0 is a valid IP
	local string=

	for string in $args; do {
		case "$string" in
			[0-9]*)
				local oldifs="$IFS"; IFS="."; explode $string; IFS="$oldifs"

				# only allow numbers
				case "$1${2:-x}${3:-x}${4:-x}" in
					*[!0-9]*) continue ;;
				esac

				# test what should NOT be
				test $1 -eq 0 -o $1 -gt 254 \
				  -o $2 -gt 254 \
				  -o $3 -gt 254 \
				  -o $4 -eq 0 -o $4 -gt 254 \
				  -o -n "$5" && continue

				echo "$string"
				return 0
			;;
		esac
	} done
}

_sanitizer_escape_single_quotes()
{
	echo "$1" | sed -e "s/'/'\\\''/g"
}

_sanitizer_escape_dots()
{
	echo -n $1 | sed 's/\./\\\./g'
}

_sanitizer_hex()
{
	echo -n "$1" | sed 's/[^a-fA-F0-9]//g'
}

_sanitizer_lowercase()
{
	echo -n "$1" | sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'
}

_sanitizer_uppercase()
{
	echo -n "$1" | sed 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'
}

_sanitizer_email()
{
	echo -n "$1" | sed 's/[^0-9a-zA-Z@\._-]//g'		# FIXME! only one '@'
}

_sanitizer_mac()
{
	local input="$1"
	local hex='0-9a-fA-F'
	local hex_without_f='0-9a-eA-E'

	case "$input" in
		*[0-9a-fA-F][0-9a-eA-E][:-][0-9a-fA-F][0-9a-fA-F][:-][0-9a-fA-F][0-9a-fA-F][:-][0-9a-fA-F][0-9a-fA-F][:-][0-9a-fA-F][0-9a-fA-F][:-][0-9a-fA-F][0-9a-fA-F]*)
			# mac's starting with ff: are invalid: http://standards.ieee.org/regauth/oui/oui.txt
			# so the 2nd byte only test from a-e,not a-f
			echo -n "$input" | sed -n "s/^.*\([$hex][$hex_without_f]\)[:-]\([$hex]\{2\}\)[:-]\([$hex]\{2\}\)[:-]\([$hex]\{2\}\)[:-]\([$hex]\{2\}\)[:-]\([$hex]\{2\}\).*/\1:\2:\3:\4:\5:\6/p"
		;;
	esac
}

_sanitizer_numeric()	# FIXME! accept negative
{
	echo -n "$1" | sed 's/[^0-9]//g'
}

_sanitizer_alphanum()
{
	echo -n "$1" | sed 's/[^a-zA-Z0-9]//g'
}

_sanitizer_shellsafe()		# allow only a-z A-Z 0-9 . _ - ~ {}     ()     ,    SPACE   = + ? @   \ / :
{
	echo -n "$1" | sed 's/[^-a-zA-Z0-9\._-~}{(), =+?@\\/]://g'
}

_sanitizer_essid()		# allow only a-z A-Z 0-9 . _ - ~ {} $ ^ () ! * , <> SPACE | = + ? @ # \ / and _NOT_ these ; : ' " [ ]
{
	echo -n "$1" | sed 's/[^-a-zA-Z0-9\._-~}{$^()!*,<> |=+?@#\\/]//g'		# fixme! allow more and escape it?
}

_sanitizer_hostname()		# rfc-952/rfc-1123 - but shorter - respect: rfc-1178 ("good hostnames")
{
	local hostname="$( printf "%s" "$1" | sed -e 's/^-//' -e 's/[^-a-zA-Z0-9]//g' )"

	_sanitizer run "$hostname" length:63
}

_sanitizer_length()
{
	local string="$1"
	local length="$2"

	printf "%s" "$string" | cut -b1-$length
}

_sanitizer_strip_nonsafe_url()		# SENSE: strip all chars, which are not URL-safe (RFC-3986, chapter 2.3. unreserved chars)
{
	echo "$1" | sed 's/[^a-zA-Z0-9%_\.~-]//g'			# fixme! sed 's/%[0-9a-fA-F][0-9a-fA-F]//g'
									# -> leave already encoded chars in?!
}

_sanitizer_strip_nonsafe_url_special()		# SENSE: strip all chars, which are in our special table in next function
{
	# is: & { } $ ^ [ ] ( ) ! * , " | TAB ; < > ' = + : ? @ # / space
	echo "$1" | sed -e 's/[}{\$\^[()!*\[,"|	;<>'\\\''=+:?@#\\/ ]//g' -e 's/]//g' -e 's/&//g'
}

_sanitizer_encode_nonsafe_url_special()		# SENSE: converting chars using a fixed table, where we know the URL-encodings
{
	# is: , ; : ? # [ ] / @ + = " ' | ( ) TAB < > ! * { } $ ^ % space
	# e.g. a 'comma' does not need encoding: http://tools.ietf.org/html/rfc3986#section-2.2

	echo "$1" | sed -e 's/%/%25/g'	\
			-e 's/&/%26/g'	\
			-e 's/,/%2c/g'	\
			-e 's/;/%3b/g'	\
			-e 's/:/%3a/g'	\
			-e 's/?/%3f/g'	\
			-e 's/#/%23/g'	\
			-e 's/\[/%5b/g'	\
			-e 's/\]/%5d/g'	\
			-e 's/\//%2f/g'	\
			-e 's/@/%40/g'	\
			-e 's/+/%2b/g'	\
			-e 's/=/%3d/g'	\
			-e 's/"/%22/g'	\
			-e "s/'/%27/g"	\
			-e "s/|/%7c/g"	\
			-e "s/[(]/%28/g" \
			-e "s/[)]/%29/g" \
			-e "s/	/%09/g"	\
			-e 's/</%3c/g'	\
			-e 's/>/%3e/g'	\
			-e 's/!/%21/g'	\
			-e 's/*/%2a/g'	\
			-e 's/{/%7b/g'	\
			-e 's/}/%7d/g'	\
			-e 's/\$/%24/g'	\
			-e 's/\^/%5e/g'	\
			-e 's/ /+/g'
}

_sanitizer_urlvalue()				# fixme! on cmdline this produces error on each "!"-sign, but output is ok
{						# ARG1: string (all chars are allowed)
	local funcname="sanitizer_urlvalue"	# OUT1: string (URL-encoded, RFC2396)
	local text="$1"
	local strip="$( _sanitizer strip_nonsafe_url "$text" )"
	local firstline='true'
	local out char hex line
	local pos=0

	[ "$text" = "$strip" ] && {	# no need for conversion, only safe chars
		echo "$text"
		return
	}

	# conversion of unsafe chars is possible with a fast table / we strip leading+trailing whitespaces
	[ "$strip" = "$( _sanitizer strip_nonsafe_url_special "$text" )" ] && {
		echo "$text" | while read -r line; do {
			[ -z "$firstline" ] && echo -n '%0a'
			printf "%s" "$( _sanitizer encode_nonsafe_url_special "$line" )"
			firstline=
		} done

		return 0
	}

	# seems that we have special chars, that are not in our table,
	# so we have to check char by char, which is slow...
	# maybe we should auto-generate a table when using this functions for the first time?

	_log it $funcname daemon info "[OK] activating slow parser: '$text'"

	while [ $pos -lt ${#text} ]; do {					# 0...length_of_text
		char="${text:$pos:1}"						# char at $pos
		pos=$(( pos + 1 ))

		if [ -n "$( _sanitizer strip_nonsafe_url "$char" )" ]; then
			out="${out}${char}"					# char is safe: append
		else
			explode $( echo "$char" | hexdump -C )			# # is unsafe char
			hex="$2"						# no matter: a-z = A-Z
			out="${out}%${hex}"
		fi
	} done

	echo "$out"
}

_sanitizer_TODO_split_string()		# ARG1: string
{					# ARG2: max_string_length

	# ToDo: sms > 160 zeichen automatisch splitten
	# text1 [1/3]
	# test2 [2/3]
	# text3 [3/3]

	local TEXT="[1]3456789[2]DEFGHIJ[3]3456789[4]DEFGHIJ[5]3456789"
	local ANZAHL=5
	local b=0
	local pos=0
	local step=10
	local von=0
	local bis=0

	local POS_START
	local POS_END

	while [ $b -lt $ANZAHL ]; do {

		b=$(( b + 1 ))
		von=$(( pos + von ))
		von=$(( von * b ))
		bis=$(( bis + step ))

		POS_START=$(( (b * step) - step + 1 ))
		POS_END=$bis

		echo "LOOP: '$b' POS_START: '$POS_START' POS_END: '$POS_END'"

		echo "$TEXT" | cut -b $POS_START-$POS_END
	} done
}

_sanitizer_list_get_longest_string()
{
	local LIST="$1"
	local MIN=0
	local WORD
	local OUT

	for WORD in $LIST; do {
		[ ${#WORD} -gt $MIN ] && {
			OUT="$WORD"
			MIN="${#WORD}"
		}
	} done

	echo $OUT
}

_sanitizer_add_length_diff_with_spaces()	# special: ARG1 is separated by space into ARG1 + ARG2
{
	local STRING_MAX="${1%[ ]*}"		# e.g. IP_max=123.123.123.123	(15chars)
	local STRING_COMPARE="${1#*[ ]}"	# e.g. IP_min=1.1.1.1		(7chars) -> DIFF_max = 8

	local MAX="${#STRING_MAX}"		# fixme! strings cannot have "spaces"
	local LENGTH="${#STRING_COMPARE}"
	local DIFF=$(( MAX - LENGTH ))

	case "$DIFF" in
		0) return ;;
		1) echo -n ' ' ;;
		2) echo -n '  ' ;;
		3) echo -n '   ' ;;
		4) echo -n '    ' ;;
		5) echo -n '     ' ;;
		6) echo -n '      ' ;;
		7) echo -n '       ' ;;
		*) echo -n '        ' ;;
	esac
}
