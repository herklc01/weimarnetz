#!/bin/sh

_wifi_phy_amp_predistortion()	# more effectiv txpower on higher rates
{
	local funcname='wifi_phy_amp_predistortion'
	local phy="${1:-0}"	# e.g. 0
	local mode="$2"		# on|off|<empty> = get
	local file="/sys/kernel/debug/ieee80211/phy${phy}/ath9k/paprd"

	case "$mode" in
		on)
			mode='Y'
		;;
		off)
			mode='N'
		;;
		get|*)
			mode='get'
		;;
	esac

	if [ -e "$file" ]; then
		_log it $funcname daemon info "phy: $phy mode: $mode"

		if [ "$mode" = 'get' ]; then
			cat "$file"
		else
			echo "$mode" >"$file"
		fi
	else
		# but: /sys/kernel/debug/ieee80211/phy0/ath10k/...	// driver = ath10k_pci
#		[ 'ath9k' = "$( _wifi driver_version )" ] || return 0
		_log it $funcname daemon info "phy: $phy mode: $mode not_found: $file"
	fi
}

_wifi_mac_assoclist()
{
	local dev="$1"

	iw dev "$dev" station dump | grep ^'Station ' | cut -d' ' -f2
}

_wifi_show_station_traffic()
{
	local mac="$1"
	local dev="$2"
	local rx_old="$3"
	local tx_old="$4"
	local uptime_old="$5"
	local uptime="$( _system uptime centisec )"
	local line rx tx tx_human rx_human rx_diff tx_diff uptime_diff unit

	# while :; do eval $( _wifi show_station_traffic "$mac" $WIFIDEV $rx $tx $up ); sleep 60; done

	iw dev "$dev" station get "$mac" |
	 while read -r line; do {
		case "$line" in
			*"rx bytes:"*)
				explode $line
				rx="$3"
			;;
			*"tx bytes:"*)
				explode $line
				tx="$3"

				rx_human="$( _sanitizer run "$rx" number_humanreadable )"
				tx_human="$( _sanitizer run "$tx" number_humanreadable )"

				if [ -n "$rx_old" ]; then
					rx_diff=$(( rx - rx_old ))
					tx_diff=$(( tx - tx_old ))
				else
					rx_diff=0
					tx_diff=0
				fi

				if [ -n "$uptime_old" ]; then
					unit="bytes/s"
					uptime_diff=$(( uptime - uptime_old ))

					divisor_valid "$uptime_diff" || uptime_diff=1
					rx_diff=$(( (rx_diff * 100) / uptime_diff ))	# divisor_valid
					tx_diff=$(( (tx_diff * 100) / uptime_diff ))	# divisor_valid
				else
					unit="bytes"
				fi

				echo "echo '# overall: tx/rx: $rx_human/$tx_human  diff_rx/tx: $rx_diff/$tx_diff $unit';"
				echo "rx=$rx; tx=$tx; up=$uptime;"
			;;
		esac
	} done
}

_wifi_minstrel()		# TODO: support for enforcing 'dev'
{				# FIXME: same mac on both bands -> choose the one with lowest "conntected time"
	local mac="$1"
	local option="$2"

	_wifi minstrel_extract_raw_and_real_txrate_from_neigh_with_highest_success_rate "$mac" "$option"
}

_wifi_minstrel_debugsfs_file()
{
	local funcname='wifi_minstrel_debugsfs_file'
	local mac="$1"
	local dev rc_type file phy
	local dir='/sys/kernel/debug/ieee80211'

	for dev in $WIFI_DEVS; do {		# e.g. wlan0 wlan0-1 wlan1-1
		explode $( iw dev "$dev" info )
		phy="$*"
		phy="${phy#*wiphy }"
		phy="${phy%% *}"

		for rc_type in rc_stats rhapsody_stats; do {
			file="$dir/phy$phy/netdev:$dev/stations/$mac/$rc_type"
			[ -e "$file" ] && {
				echo "$file"
				return 0
			}
		} done
	} done

	_log it $funcname daemon debug 'no entry'
	return 1
}

# FIXME! rename and rework for:
# _wifi_minstrel_effective_throughput_rate_tupel_max
_wifi_minstrel_extract_raw_and_real_txrate_from_neigh_with_highest_success_rate()
{
	local mac="$1"		# or IP
	local option="$2"	# debug
	local ip line result targetline rate rate_calc throughput efficiency system file
	local max=0

	[ "$option" = 'debug' ] || {
#		_log it minstrel_out daemon debug "FIXME - cleanup needed, use 'debug' for override"
		echo "txrate=${rate:-0};txthroughput=${throughput:-0};efficiency=${efficiency:-0};system=${system};ip=$ip"
		return 0
	}

	case "$mac" in
		*':'*)
			ip="$( _net mac2ip "$mac" )"
		;;
		*)
			_sanitizer run "$mac" ip4 check && {
				ip="$mac"
				mac="$( _net ip2mac $mac )"
			}
		;;
	esac

	[ -e '/tmp/OLSR/LINKS.sh' ] && {
		eval $( grep -F "REMOTE=${ip};" '/tmp/OLSR/LINKS.sh' )
		printf '%s' "lq=$LQ;nlq=$NLQ;cost=$COST;"
	}

	file="$( _wifi_minstrel_debugsfs_file "$mac" )" || return 1

	[ "$option" = "debug" ] && {
		_log it minstrel_out daemon debug "output of $file"
		cat "$file"
		echo
	}

	percent()
	{
		if [ $1 -lt 100 ]; then
			echo '0'
		else
			if divisor_valid "$2"; then
				echo "$(( ( $1 * 100 ) / $2 ))"		# divisor_valid
			else
				echo '0'
			fi
		fi
	}

	while read -r line; do {
		case "$line" in
			Type*|type*)
				continue
			;;
			T*|t*)			# only use lines with highest/2nd-highest rate
				explode $line
			;;
			"HT20/LGI T"*|"HT20/SGI T"*|"HT40/LGI T"*|"HT40/SGI T"*)
				system="n"
				explode $line
				shift
			;;
			"HT20/LGI  t"*|"HT20/SGI  t"*|"HT40/LGI  t"*|"HT40/SGI	t"*)
				system="n"
				explode $line
				shift
			;;
			*)
				continue
			;;
		esac

#		logger -s "interesting line: 1: $1 2: $2 3: $3 4:$3 5: $5 6: $6 7: $7 8: $8 9: $9 10: ${10}"

		case "$2" in
			1|2|5.5|11|6|9|12|18|24|36|48|54|*MCS*)

				if [ -n "$9" ]; then
					result="$( percent "$8" "$9" )"
				else
					result="$( percent "$7" "$8" )"
				fi

				[ $result -gt $max ] && {
					max=$result
					targetline="$line"
				}
			;;
			*)
				case "$3" in
					ewma|count*)
						:
					;;
					*)
						if [ -n "${10}" ]; then
							result="$( percent "$9" "${10}" )"
						else
							result="$( percent "$7" "$8" )"
						fi

						[ $result -gt $max ] && {
							max=$result
							targetline="$line"
						}
					;;
				esac
			;;
		esac

	} done <$file

	[ -n "$targetline" ] && {
		explode $targetline
#		logger -s "TL 1: $1 2: $2 3: $3 4:$3 5: $5 6: $6 7: $7 8: $8 9: $9"

		case "$2" in
			*MCS*)
				system="n"
				rate="$2"
				throughput="$3"
			;;
			1|2|5.5|11|6|9|12|18|24|36|48|54)
				system="g"
				rate="$2"
				throughput="$3"
			;;
			*)
				rate="$3"
				throughput="$4"
			;;
		esac

		[ "$rate" = '0' ] || {
#			logger -s "rate: $rate"

			case "$rate" in
				*'MCS'*)
					system="n"
					rate="$( _wifi math_mcs2rate "$1" "$1" "$rate" "$option" )"
#					logger -s "rate: $rate"
				;;
				*)
					system="g"
				;;
			esac

			if [ "${throughput%.*}" = "0" ]; then
				efficiency="${throughput#*.}"				# 0.9 -> 9
			else
				efficiency="${throughput%.*}${throughput#*.}"		# 42.6 -> 426
			fi

			# e.g. 5.5 or 11 -> efficiency in [percent]
			case "$rate" in
				*'.'*)
					rate_calc="$( echo "$rate" | tr -d '.' )"
					if divisor_valid "$rate_calc"; then
						efficiency=$(( ( efficiency * 100 ) / rate_calc ))	# divisor_valid
					else
						efficiency=0
					fi
				;;
				*)
					divisor_valid "$rate" || rate=1
					efficiency=$(( ( efficiency * 10 ) / rate ))	# divisor_valid
				;;
			esac
		}
	}

	echo "txrate=${rate:-0};txthroughput=${throughput:-0};efficiency=${efficiency:-0};system=${system};ip=$ip"
}

_wifi_tx_and_rx()
{
	local dev="${1:-does_not_exist}"	# NETWORK_DEV e.g. WIFI_DEV
	# WIFI_RX_BYTES=1665694551
	# WIFI_RX_PACKETS=22019893
	# WIFI_RX_ERRORS=0
	# WIFI_RX_FRAMES=109127
	# WIFI_TX_BYTES=2572111365
	# WIFI_TX_PACKETS=22193801
	# WIFI_TX_ERRORS=3

	local file='/proc/net/dev'

	sed -n "s/^.*$dev: *\([0-9]*\) *\([0-9]*\) *\([0-9]*\) *[0-9]* *[0-9]* *\([0-9]*\) *[0-9]* *[0-9]* *\([0-9]*\) *\([0-9]*\) *\([0-9]*\) .*/WIFI_RX_BYTES=\1\nWIFI_RX_PACKETS=\2\nWIFI_RX_ERRORS=\3\nWIFI_RX_FRAMES=\4\nWIFI_TX_BYTES=\5\nWIFI_TX_PACKETS=\6\nWIFI_TX_ERRORS=\7/p" "$file"
}

_wifi_scan_geolocation()
{
	local funcname='wifi_scan_geolocation'
	local file="$TMPDIR/scan.json"
	local marker="$TMPDIR/$funcname"	# e.g. 50.972;11.328
	local lat='' lon='' latlon=''

	[ $OPENWRT_REV -gt 0 -a -e "$marker" ] && {
		_file age "$marker" -lt 43200 && {
			read -r latlon <"$marker"
			_log it $funcname daemon debug "lat/lon from '$marker': $latlon - http://www.openstreetmap.org/#map=18/${latlon%;*}/${latlon#*;}"
			return 0
		}
	}

	# we need SSL and --postdata during api_query() - TODO: add curl
	[ -e '/bin/uclient-fetch' ] || {
		wget --version | grep -q ^'GNU' || return 0
	}

	# TODO: reverse geocoding:
	# http://nominatim.openstreetmap.org/reverse?lat=51.287763&lon=10.7412933&addressdetails=1&format=json
	_wifi scan_geolocation_api_build_json >"$file" && {
		eval $( _wifi scan_geolocation_api_query "$file" )

		[ -n "$lat" -a -n "$lon" ] && {
			_log it $funcname daemon info "http://www.openstreetmap.org/#map=18/$lat/$lon"
			echo "$lat;$lon" >"$marker"
			uci set "system.@admin[0].latlon=$lat;$lon"
		}
	}

	rm -f "$file"
}

_wifi_scan_geolocation_api_build_json()
{
	local funcname='wifi_scan_geolocation_api_build_json'
	local signal freq bssid dev line dev_list=
	local i=0
	local file="$TMPDIR/$funcname"

	# use all devs (e.g. 2+5GHz) - TODO: wwan/3G
	for dev in $WIFI_DEVS; do {
		case "$dev" in
			*'-'*)
				# ignore e.g. 'wlan1-1' but work on base_dev 'wlan1'
			;;
			*)
				dev_list="$dev_list $dev"
				_wifi scan "$dev" mozilla
			;;
		esac
	} done >"$file"

	[ -s "$file" ] || {
		[ -e "$file" ] && rm -f "$file"
		_log it $funcname daemon debug "[ERROR] empty or no scan for devs: '$dev_list'"

		test -z "$WIFI_DEVS"	# do not complain on servers (use public-IP for location)
		return $?
	}

	echo '{'
	echo '	"wifiAccessPoints": ['
	echo '	{'

	# e.g. -39 2432 ca:d3:a3:57:f7:6a
	while read -r line; do {
		explode $line
		signal="$1"
		freq="$2"
		bssid="$3"
		[ -n "$bssid" ] && i=$(( i + 1 ))

		echo "	  \"macAddress\": \"$bssid\","
		echo "	  \"signalStrength\": $signal,"
		echo "	  \"frequency\": $freq,"
		echo "	  \"age\": $i"
		echo '	}, {'
	} done <"$file"
	rm -f "$file"

	# just for valid json:
	echo "	  \"macAddress\": \"$( _net dev2mac "$WIFIDEV" )\""
	echo '	}]'
	echo '}'

	test $i -gt 0
}

_wifi_scan_geolocation_api_query()
{
	local funcname='wifi_scan_geolocation_api_query'
	local file="$1"
	local answer api_key k1 k2 k3 api_url lat lon

	# https://location.services.mozilla.com/
	# https://mozilla.github.io/ichnaea/api/geolocate.html#api-geolocate-latest
	k1='3b4ee1fe'			# official freifunk-key
	k2='b1a5-4293-bdc5'		# hide from badboys
	k3='154b50f11b8a'		# (can also be 'test')

	api_key="$k1-$k2-$k3"
	api_url="https://location.services.mozilla.com/v1/geolocate?key=$api_key"
#	answer="$( curl --insecure -H "Content-Type: application/json" -X POST --data @"$file" "$api_url" )"
	answer="$( wget --no-check-certificate --post-data="$( cat "$file" )" -qO - "$api_url" )"
	_log it $funcname daemon debug "answer: $answer"

	# e.g.:
	# {"location": {"lat": 50.9881901, "lng": 11.334436}, "accuracy": 212.0650219}
	# {"location": {"lat": 50.988505, "lng": 11.3352539}, "accuracy": 146.3677526}
	# {"fallback": "ipf", "location": {"lat": 50.9945, "lng": 11.0528}, "accuracy": 25000.0}
	explode $answer
	if [ "$1" = '{"fallback":' ]; then
		lat="$( echo "$5" | cut -d',' -f1 )"
		lon="$( echo "$7" | cut -d'}' -f1 )"
	else
		lat="$( echo "$3" | cut -d',' -f1 )"
		lon="$( echo "$5" | cut -d'}' -f1 )"
	fi

	if [ -z "$lat" -o -z "$lon" ]; then
		echo "lat=;lon="
		_log it $funcname daemon info "[ERROR] answer: $answer"
	else
		echo "lat=$lat;lon=$lon"	# use via 'eval'
	fi
}

# vim: set filetype=sh ai noet ts=4 sw=4 sts=4 :
