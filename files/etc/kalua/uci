#!/bin/sh 

# uci helper functions from override_uci_vars

_uci_config_add_alias()
{
	local network="$1"		# e.g. 'lan'
	local ip_and_mask="$2"		# e.g. '10.20.30.9/24'
	local gateway="$3"		# e.g. '10.20.30.1' or <empty>
	local ip mask

	ip="${ip_and_mask%/*}"
	mask="${ip_and_mask#*/}"
	mask="$( _net cidr2mask "$mask" )"

	uci_already_added 'network' 'alias' 'interface' "$network" || {
		uci add network alias >/dev/null
		uci set network.@alias[-1].interface="$network"
		uci set network.@alias[-1].proto='static'
		uci set network.@alias[-1].ipaddr="$ip"
		uci set network.@alias[-1].netmask="$mask"
		[ -n "$gateway" ] && uci set network.@alias[-1].gateway="$gateway"
	}
}

_uci_sanitize_wireless_macs()
{
	local funcname='uci_sanitize_wireless_macs'
	local file shortname radio interface mac mac_old mac_new index
	local summand=1
	local maclist_wireless=
	local maclist_all=

	for file in "$PERMDIR/netparam_iface-idx2mac-"*; do {
		[ -e "$file" ] && {
			read -r mac <"$file"
			index="$( echo "$file" | cut -d'-' -f3 )"

			_log it $funcname daemon info "preset: wireless.@wifi-iface[$index].macaddr=$mac"
			uci set "wireless.@wifi-iface[$index].macaddr=$mac"
		}
	} done

	# see '/etc/hotplug.d/iface/00-netparam'
	# all wireless macs
	for file in "$PERMDIR/netparam_phy-"[0-9]'-mac-'*; do {
		[ -e "$file" ] && {
			read -r mac <"$file"
			radio="$(     basename "$file" | cut -d'-' -f2 )"	# e.g. 0 or 1
			interface="$( basename "$file" | cut -d'-' -f4 )"	# e.g. wlanadhocRADIO1

			case "$interface" in
				'cfg'*)
					# e.g. cfg0f4d8f
				;;
				*)
					maclist_wireless="$maclist_wireless $mac,$radio,$interface"
					_log it $funcname daemon debug "wireless: $mac,$radio,$interface"
				;;
			esac
		}
	} done

	# all macs
	for file in "$PERMDIR/netparam_iface-"*'-mac'; do {
		[ -e "$file" ] && {
			read -r mac <"$file"

			case "$file" in
				*'_iface-cfg'*)
				;;
				*)
					shortname="$( basename "$file" | cut -d'-' -f2 )"
					_log it $funcname daemon debug "all_macs: $mac - $shortname"
					maclist_all="$maclist_all $mac"
				;;
			esac
		}
	} done

	# check each wireless mac if it's used twice, if so
	for mac in $( _list sorted "$maclist_wireless" ); do {
		interface="$(	echo "$mac" | cut -d',' -f3 )"		# e.g. wlanadhocRADIO1
		radio="$(	echo "$mac" | cut -d',' -f2 )"		# e.g. 0 or 1
		mac="$(		echo "$mac" | cut -d',' -f1 )"

		[ "$mac" = "$mac_old" ] && {
			_log it $funcname daemon info "same mac/phy '$mac/$radio/$interface' on different phy's: $maclist_wireless"

			while :; do {
				mac_new="$( _net macplus "$mac" "$summand" )"
				summand=$(( summand + 1 ))
				_list contains_element "$maclist_all" "$mac_new" || break
			} done

			index="$( _wifi get "$interface" index )"
			_log it $funcname daemon alert "setting: wireless.@wifi-iface[$index].macaddr='$mac_new' (was: '$mac')"
			uci set "wireless.@wifi-iface[$index].macaddr=$mac_new"
			mac="$mac_new"
		}

		mac_old="$mac"
	} done
}

_uci_remove_section()
{
	local check_var="$1"	# e.g. network.@alias[].interface
	local check_value="$2"	# e.g. loopback
	local p1="$( echo "$check_var" | cut -d'[' -f1 )"
	local p2="$( echo "$check_var" | cut -d']' -f2 )"

	local i
	for i in $( seq 15 -1 0 ); do {
		while [ "$( uci -q get "${p1}[$i]${p2}" )" = "$check_value" ]; do {
			uci delete "${p1}[$i]"
		} done
	} done
}

_uci_already_added()
{
	local config="$1"	# e.g. network
	local section="$2"	# e.g. alias
	local item="$3"		# e.g. ipaddr or 'interface'
	local wish="$4"		# e.g. 10.10.43.33 or 'lan'
	local value i=0

	while value="$( uci -q get $config.@$section[$i].$item )"; do {
		if [ "$wish" = "$value" ]; then
			return 0
		else
			i=$(( i + 1 ))
		fi
	} done

	return 1
}

