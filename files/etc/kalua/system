#!/bin/sh

_system_kmodules()
{
	local funcname='system_kmodules'
	local action="$1"	# e.g. 'unload'
	local list="$2"
	local kmodule

	case "$action" in
		'unload')
			# lsmod | while read L; do explode $L; echo $2 $1 $3;done | sort -n

			for kmodule in $list; do {
				grep -q "$kmodule " '/proc/modules' && {
					_log it $funcname daemon info "unloading '$kmodule'"

					rmmod $kmodule || {
						_log it $funcname daemon info "[ERR] unloading '$kmodule'"
					}
				}
			} done
		;;
	esac
}

_system_crashreboot()
{
	local funcname='system_crashreboot'
	local reason_long="$1"
	local unixtime file reason octal
	local log='/dev/console'	# being simple: do not invoke log()-wrapper
	local message="parent: $0 $funcname() reason: '$reason_long'"

	case "$OPENWRT_REV" in 0) log="$PERMLOG" ;; esac	# vpn-server
	echo "$message" >>$log

	case "$reason_long" in
		[0-9a-zA-Z])
			reason="$reason_long"	# one char/digit
		;;
		*)
			# do not change layout here, because in
			# /etc/init.d/generate_kalua_loader: reason_long()
			# we grep this function
			case "$reason_long" in
				nightly_reboot)	reason=0 ;;
				switch_error)	reason=1 ;;
				network_hangs)	reason=2 ;;
				overload)	reason=3 ;;
				olsrd_missing)  reason=4 ;;
				conntrack_full) reason=5 ;;
				flappy_ether)	reason=6 ;;	# unused
				flappy_olsr)	reason=7 ;;
				old_lockfile)	reason=8 ;;	# 9 is special, see below
				over_uptime)	reason=A ;;
				ubus_hangs)	reason=B ;;
				underload)	reason=C ;;
				cron_died)	reason=D ;;
				ssid_change)	reason=E ;;
				uhttpd_zombie)	reason=F ;;
				kmodules_tidyup)  reason=G ;;
				watchdog_disable) reason=H ;;
				patching_failed)  reason=I ;;
				sysupgrade_start) reason=J ;;
				download_failed)  reason=K ;;
				olsr_no_netifd)   reason=L ;;
				wrong_neighhash)  reason=M ;;
				apply_settings)	reason=N ;;	# FIXME! is unused
				applied_nodeid)	reason=O ;;
				procd_overload)	reason=P ;;
				bad_link)	reason=Q ;;
				wifimac_safed)	reason=R ;;
				task_hangs)	reason=S ;;
				apply_profile)	reason=T ;;
				err_wifialloc)	reason=U ;;
				kernel_unaligned_access) reason=V ;;
				page_alloc_fail) reason=W ;;
				BUG_bad_page)    reason=X ;;
				recursive_fault) reason=Y ;;
				wifi_txdma)      reason=Z ;;
				webcam_pic2small) reason=a ;;
				procfs_broken)    reason=b ;;
				hanging_wifi)     reason=c ;;
				khubd_blocked)    reason=d ;;
				lanping)	  reason=e ;;
				wanping)	  reason=f ;;
				ubus_dead)	  reason=g ;;
				netifd_overload)  reason=h ;;
				wifiphy_probs)    reason=i ;;
				pidof_hangs)      reason=j ;;
				lost_ip_and_hostapd) reason=k ;;
				irq_probs)	  reason=l ;;
				olsr_restart2much) reason=m ;;
				dns_hangs)	reason=n ;;
				zombies)	reason=o ;;
				dead_roaming)	reason=p ;;
				apt-get_reboot) reason=q ;;
				''|manual)
					reason=9
					reason_long='manual'
					echo "<!-- $message -->"
				;;
				*)
					reason=${#reason_long}		# hello   = 5
					reason=$(( 123 - reason ))	# 123 - 5 = 118
					# 122 = z / 97 = a		# 118     = v
					octal="$( printf '%03o' "$reason" )"
					reason="$( eval printf "\\\\$octal" )"
				;;
			esac
		;;
	esac

	# must include 'ux', this is our grep-pattern during bootup/restore time
	unixtime="$( /bin/date +%s )"
	file="$TMPDIR/ux${reason},$(( unixtime + 30 )),.sh"
	touch "$file" || _watch space_tmpfs

	# crashlog has this line, we use comma-separator
	# max 15 chars: reason/unixtime/separator = 3+10+2 = 15
	# CPU: 0 PID: 23018 Comm: ux0,1381076626, Not tainted 3.10.15 #5
	#			  ^^^^^^^^^^^^^^^ this is our filename

	[ -e '/www/CRASHLOG_WORKS' ] || echo "$funcname() reason: $reason_long =$reason" >>"$PERMLOG"

	{
		# use shell builtins only (except 'reboot')
		echo '#!/bin/sh'
		echo 'echo s >/proc/sysrq-trigger'				# [s]ync
		echo 'i=128000; while case $i in 0) false;; *) i=$(( i - 1 ));; esac; do :; done'	# wait ~10 sec
		echo 'command -v /tmp/sysupgrade || echo c >/proc/sysrq-trigger'	# [c]rash
		echo 'i=256000; while case $i in 0) false;; *) i=$(( i - 1 ));; esac; do :; done'	# wait ~20 sec
		echo 'command -v /tmp/sysupgrade || /sbin/reboot -f'
	} >"$file"

	command -v '/tmp/sysupgrade' && return 1	# from '/sbin/sysupgrade'

	case "$HARDWARE" in
		'toomuchreboots'*)
			_log it $funcname daemon alert "ignoring call: $HARDWARE - $message"
			rm "$file"
		;;
		'UML')
			_log it $funcname daemon info '[OK] will reboot, crashing will end/stop the UML, if you need this, better use "halt"'
			sync
			/sbin/reboot -f
		;;
		*)
			/bin/chmod +x "$file" && "$file"
			command -v '/tmp/sysupgrade' && return 1

			# last try
			echo 'c' >/proc/sysrq-trigger
			/sbin/reboot -f
		;;
	esac
}

_system_cpucount()
{
	local i=

	# AIX7: lsconf | grep -c 'proc[0-9]'
	# http://lists.landley.net/pipermail/toybox-landley.net/2015-October/004551.html
	# TODO: nproc?
	# TODO: check really active if file exists:
	# /sys/devices/system/cpu/online
	# or
	# grep -sc ^'processor' '/proc/cpuinfo'
	for _ in /sys/devices/system/cpu/cpu[0-9]*; do i=$(( ${i:-0} + 1 )); done
	echo "$i"
}

_system_reboot_reason()
{
	# see /etc/init.d/generate_kalua_loader
	cat '/tmp/REBOOT_REASON' 2>/dev/null || echo 'unknown'
}

_system_reboots()
{
	local option="$1"	# e.g. -gt or 'get' or 'set'
	local arg2="$2"		# e.g. 50
	local i=0
	local file='/www/REBOOT_COUNTER'

	read -r i 2>/dev/null <"$file"

	case "$option" in
		'-'*)
			test $i $option $arg2
		;;
		'set')
			isnumber "$arg2" || return
			echo "$arg2" >"$file"
		;;
		'get'|*)
			echo $i
		;;
	esac
}

_system_fully_installed()
{
	test -n "$FAILSAFE" && return 1

	# is deleted after successful execution
	test ! -e '/etc/init.d/apply_profile'
}

_system_clib()
{
	# does not work on r42232: 'ldd --version'
	local line="$( ldd /sbin/uci | grep -F 'libc.so' | tail -n1 )"

	case "$line" in
		*'uClibc'*)
			echo 'uclibc'
		;;
		*'musl'*)
			echo 'musl'
		;;
		*)
			echo 'unknown'
		;;
	esac
}

_system_del_ramdisc()
{
	local funcname='system_del_ramdisc'
	local name="$1"		# e.g. 'database' or '/database/DB'

	case "$name" in
		*'/'*)
			# /database/DB -> database
			name="$( dirname  "$name" )"
			name="$( basename "$name" )"
		;;
	esac

	_log it $funcname daemon info "working on '$name'"

	# /dev/sda1 /database vfat rw,...	# USB
	# tmpfs /database tmpfs rw,...		# ramdisk
	if grep -q " /$name " '/proc/mounts'; then
		umount "/$name" || {
			_log it $funcname daemon alert "[ERR] failed to umount /$name"
			return 1
		}
	else
		_log it $funcname daemon info "[OK] not mounted"
		return 0
	fi

	[ -d "/${name:-does_not_exist}" ] && {
		rm -fR "/${name:-does_not_exist}" || {
			# e.g. busy
			_log it $funcname daemon alert "[ERR] failed to remove /$name"
			return 1
		}
	}

	return 0
}

_system_add_ramdisc()
{
	local funcname='system_add_ramdisc'
	local name="$1"		# e.g. 'webcam'
	local option="$2"	# e.g. 'compressable' or e.g. '16k'
	local divide=2
	local size_tmpfs=

	# FIXME! seems racy

	case "$name" in
		*'/'*'/'*)
			# /tmp/DB -> tmp
			name="$( dirname "$name" | cut -b 2- )"
		;;
		'/'*)
			# /webcam -> webcam
			name="$( echo "$name" | cut -b 2- )"
		;;
	esac

	_log it $funcname daemon info "working on '$name'"
	[ -z "$name" ] && return 1

	# tmpfs /database tmpfs rw,nosuid,nodev,relatime,size=14500k 0 0
	if grep -q ^"tmpfs /$name " '/proc/mounts'; then
		_log it $funcname daemon debug "[OK] already mounted: /$name"
	else
		if   [ "$option" = 'compressable' ]; then
			# larger size, if content can be compressed
			grep -q ^'/dev/zram' '/proc/swaps' && divide=1
		elif [ -n "$option" ]; then
			size_tmpfs="$option"
		fi

		[ -z "$size_tmpfs" ] && {
			divisor_valid "$divide" || divide=1
			size_tmpfs=$( _system ram_size )
			size_tmpfs=$(( size_tmpfs * 1024 / divide ))	# divisor_valid
		}

		_log it $funcname daemon info "adding ramdisk '/$name' - size $size_tmpfs"
		mkdir -p "/$name"
		mount -t tmpfs -o size=${size_tmpfs},nosuid,nodev,mode=1777 tmpfs "/$name" || {
			_log it $funcname daemon alert "[ERR] mounting $name"
			return 1
		}
	fi
}

_system_maintenance_window_active()
{
	local option="$1"			# <empty> or 'pppoe_reconnect'
	local mytime="$( date '+%H:%M' )"	# 09:00

	case "$option" in
		'pppoe_reconnect')
			case "$mytime" in
				'04:0'*|'04:1'*)
					# 4:00 - 4:19
					return 0
				;;
			esac
		;;
		*)
			case "$mytime" in
				'02'*|'03'*|'04'*)
					return 0
				;;
			esac
		;;
	esac

	test -e '/tmp/MAINTENANCE'
}

_system_architecture()
{
	local file='/tmp/system_architecture'
	local arch DISTRIB_TARGET

	[ -e "$file" ] || {
		# prevents chicken/egg problem with software_opkg_raminstaller()
		[ -e "$OPKG" -a $OPENWRT_REV -lt 100000 ] && {	# LEDE = 100000++
			# e.g. Architecture: ramips_24kec
			arch="$( _software package_status kernel | grep ^'Architecture:' )"
			arch="${arch#*: }"
			arch="${arch%%_*}"
		}

		if [ -n "$arch" ]; then
			echo "$arch" >"$file"
		else
			# DISTRIB_TARGET='ar71xx/generic'
			# DISTRIB_TARGET='brcm47xx/generic'
			# DISTRIB_TARGET="rb532/generic"
			# DISTRIB_TARGET="ramips/generic"

			if [ -e '/etc/openwrt_release' ]; then
				eval $( grep ^'DISTRIB_TARGET=' '/etc/openwrt_release' )
				arch="$DISTRIB_TARGET"
				arch="${arch%%/*}"
			else
				arch="$( uname -m )"			# e.g. 'x86_64' or 'mips'
				[ "$arch" = 'i686' ] && arch='x86'	# debian
			fi

			echo "$arch" >"$file"
		fi
	}

	cat "$file"
}

_system_get_first_pid ()	# pidof returns an arbitrary sorted list, so we have to sort to get the lowest
{
	local processname="$1"
	local list_pids="$( pidof $processname )"
	local pid
	local max_pid=32767	# -> /proc/sys/kernel/pid_max -1 on kernel >= 2.5
	local min_pid=$max_pid

	for pid in $list_pids; do {
		[ $pid -lt $min_pid ] && {
			min_pid=$pid	
		}
	} done

	[ "$max_pid" = "$min_pid" ] || echo $min_pid
}

_system_version()
{
	local option="$1"	# e.g. <empty> or '41391...42330'
	local begin end

	case "$option" in
		*'...'*)
			# e.g. 12345...23456
			begin="${option%...*}"
			end="${option#*...}"

			test $OPENWRT_REV -ge $begin -a $OPENWRT_REV -le $end
		;;
		*)
			echo "$OPENWRT_REV"	# e.g. 12345
		;;
	esac
}

_system_reboot_safe()				# fixme! maybe shutting down services like vpn, olsrd?
{						# fixme! safe vds-data? rrd-data?
	local funcname='system_reboot_safe'
	local reason="$1"			# first word must be valid for crashreboot()
	local lockfile="/tmp/$funcname-active"

	_linklocal wifi_users "$WIFIDEV" >/dev/null && {
		_log it $funcname daemon info "waiting till all wifi-clients disconnect, rescheduling myself"
		echo >>$SCHEDULER "_system reboot_safe '$reason'"
		return
	}

	[ -e  "$lockfile" ] && return
	touch "$lockfile"

	_mail stash_for_later_resend

	cron.monitoring send_alive_message no_antenna_test	# maybe the last feedback can be helpful

	[ -e '/www/CRASHLOG_WORKS' -a "$reason" = 'nightly_reboot' ] || {
		_log it $funcname daemon alert "scheduling reboot - reason: '$reason'"
	}

	[ $( _system flash_free ) -gt 250 ] && {
		# # found comment at fileend?
		tail -n1 "$TMPDIR/ARCHIV_MONITORING" | grep -q ^'#' || {
			_log it $funcname daemon info "send_alive_message was unsuccessful, backing up '$TMPDIR/ARCHIV_MONITORING'"

			local LINENUMBER_LAST_SUCCESS="$( grep -n "^#" "$TMPDIR/ARCHIV_MONITORING" | tail -n1 | cut -d':' -f1 )"
			sed -n "$(( LINENUMBER_LAST_SUCCESS + 1 )),\$p" "$TMPDIR/ARCHIV_MONITORING" >'/www/backup_archiv_node_data'
		}
	}

	if _system fully_installed; then
		[ "$reason" = 'nightly_reboot' ] || {
			_log it $funcname daemon info "safing last 100 lines of syslog to '/www/SYSLOG_SAFED'"
			logread | grep -v 'kern.err olsrd' | tail -n 100 >'/www/SYSLOG_SAFED'
		}
	else
		_log it $funcname daemon info "safing syslog to '/www/SYSLOG_SAFED'"

		# we don't need the "add route/del route" errors
		logread | grep -v 'kern.err olsrd' >'/www/SYSLOG_SAFED'
	fi	

	_log it $funcname daemon info "flash free: '$( _system flash_free )', rebooting in 10 sec"

	[ "$( uci -q get network.wan.proto )" = 'dhcp' ] && {
		# renew lease, so we will have it again after reboot?
		( ifup wan ) &
	}

	explode $reason
	_system crashreboot "$1"
}

_system_load()			# load without comma, e.g. 1.00 = 100 or 12.89 = 1289 or 0.05 = 5
{
	local time="${1:-1min}"
	local format="$2"	# e.g. quiet OR full OR <empty>
	local cpuload decimals out oldIFS

	case "$time" in
		'1min')
			oldIFS="$IFS"; IFS='. '; read -r cpuload decimals _ </proc/loadavg; IFS="$oldIFS"
		;;
		'5min')
			oldIFS="$IFS"; IFS='. '; read -r cpuload decimals cpuload decimals _ </proc/loadavg; IFS="$oldIFS"
		;;
		'15min')
			oldIFS="$IFS"; IFS='. '; read -r cpuload decimals cpuload decimals cpuload decimals _ </proc/loadavg; IFS="$oldIFS"
		;;
	esac

	case "$format" in
		full)
			out="${cpuload}.${decimals}"
		;;
		*)
			out="${cpuload}${decimals}"
			out="${out#0}"				# cut off leading zero's
			out="${out#0}"

			export LOAD="$out"
		;;
	esac

	[ "$format" = 'quiet' ] || echo "${out:-100}"
}

_system_disc_free()
{
	local disc="$1"		# e.g. /tmp
	local unit="$2"		# defaults to [kilobytes]
	local line percent_used

	case "$disc" in
		'/'*'/'*)
			# e.g. /tmp/sysinfo
			disc="$( dirname "$disc" )"	# /tmp
		;;
	esac

	# user@box:~ df /tmp
	# Filesystem           1K-blocks      Used Available Use% Mounted on
	# tmpfs                    14152      1220     12932   9% /tmp
	line="$( df "$disc" )"
	explode ${line:-0 0 0 0 0 0 0 0 0 0 0}
	shift 7

	case "$unit" in
		'percent')
			percent_used="${5%[%]*}"		# 89% -> 89
			echo $(( 100 - ${percent_used:-0} ))
		;;
		'bytes')
			echo $(( $4 * 1024 ))
		;;
		'kilobytes'|*)
			echo "$4"
		;;
	esac
}

_system_flash_free()
{
	local unit="$1"

	if grep -sq '/overlay' '/proc/mounts'; then
		_system disc_free '/overlay' $unit
	else
		_system disc_free '/' $unit
	fi
}

_system_flash_size()	# [kByte]
{
	local name hexsize line size=0
	local mtd='/proc/mtd'

	test -e "$mtd" && while read -r line; do {
		explode $line		# mtd3: 003c0000 00010000 "rootfs_data"
		name="$4"		# e.g. "rootfs_data"
		name="${name%\"}"
		name="${name#\"*}"	# strip trailing/leading "
		hexsize="0x$2"

		# todo: wap20: cfe + linux + nvram
		case "$name" in
			'RedBoot'|'u-boot'|'boardconfig'|'FIS directory'|'art'|'RedBoot config'|'kernel'|'rootfs')
				size=$(( size + hexsize ))
			;;
		esac
	} done <"$mtd"

	echo "$(( size / 1024 ))"
}

_system_uptime()		# OUT1 = string
{
	local FORMAT="$1"	# string: plain|centisec|sec|min|hour|days|humanreadable|<value from dmesg>
	local OPTION="$2"
	local UPTIME FLOAT oldifs unixtime

	local oldifs="$IFS"
	IFS='. '
	read -r UPTIME FLOAT _ </proc/uptime		# reads integer = seconds
	IFS="$oldifs"

	case "$FORMAT" in
		humanreadable)
			UPTIME="$( _stopwatch seconds2humanreadable "$UPTIME" )"
		;;
		sec)
			:
		;;
		min)
			UPTIME=$(( UPTIME / 60 ))
		;;
		h|hour|hours)
			UPTIME=$(( UPTIME / 3600 ))
		;;
		days)
			UPTIME=$(( UPTIME / 86400 ))
		;;
		centisec|centi)
			UPTIME="${UPTIME}${FLOAT}"
		;;
		plain)
			UPTIME="$UPTIME.$FLOAT"
		;;
		[0-9]*)
			# value given, e.g. from dmesg - so calculate real time
			unixtime=$(( $( _system date unixtime ) - ( UPTIME - ${FORMAT%.*} ) ))
			UPTIME="$( _system date unixtime2date "$unixtime" )"
		;;
	esac

	echo "${OPTION}$UPTIME"
}

_system_date()				# fixme! set a fixed path for the binary?
{					# fixme! make a new class _date()?
	local FORMAT="$1"

	case "$FORMAT" in
		humanreadable)
			case "$2" in
				'short')
					_sanitizer run "$( date +%Y%b%d )" lowercase		# 2008oct12
				;;
				'nice')
					date "+%d.%b'%y-%H:%M"					# 06.May'08-18:10
				;;
				*)
					_sanitizer run "$( date +%Y%b%d_%H:%M )" lowercase	# 2008oct12_20:25
				;;
			esac
		;;
		full)
			date						# Mon Sep 28 09:08:04 CEST 2009
		;;
		unixtime)
			date +%s					# 1254121912
		;;
		mail)							# Wed, 7 May 2008 16:04:59 +0200
			echo "$( date +%a ), $( date +%e | sed 's/ //' ) $( date "+%b %Y %X %z" | sed 's/-0/+0/' )"
		;;
		unixtime2date)
			date -d @$2
		;;
		2unixtime)			# hwclock:               "Mon Nov  7 12:59:49 2016"
			local DATE="$2"		# output of 'date', e.g. "Tue Mar  9 11:07:44 CET 2010"
						# TODO: uname -a: "5 Mon Apr 11 11:24:07 CEST 2011"
						# TODO: uname -a: "1 So 4. Okt 13:34:39 CEST 2009"
						# TODO: 2016-12-13T05:08:12+00:00

			local MONTH DAY TIME ZONE YEAR HOUR MIN SEC oldifs

			read -r _ MONTH DAY TIME ZONE YEAR <<EOF
$DATE
EOF
			[ -z "$YEAR" ] && YEAR="$ZONE"		# ls -le '$file'

			case "$MONTH" in
				Jan|jan) MONTH=01 ;;
				Feb|feb) MONTH=02 ;;
				Mar|mar) MONTH=03 ;;
				Apr|apr) MONTH=04 ;;
				May|may) MONTH=05 ;;
				Jun|jun) MONTH=06 ;;
				Jul|jul) MONTH=07 ;;
				Aug|aug) MONTH=08 ;;
				Sep|sep) MONTH=09 ;;
				Oct|oct) MONTH=10 ;;
				Nov|nov) MONTH=11 ;;
				Dec|dec) MONTH=12 ;;
			esac

			case "$DAY" in
				[1-9]) DAY="0$DAY" ;;
			esac

			oldifs="$IFS"
			IFS=":"
			read -r HOUR MIN SEC <<EOF
$TIME
EOF
			IFS="$oldifs"

			date --date "${YEAR}-${MONTH}-${DAY} ${HOUR}:${MIN}:${SEC}" +%s
		;;
		evalable)
			date "+DATE=\"%b %d %H:%M:%S\""
		;;
		*)
			date "+%b %d %H:%M:%S"				# Sep 28 09:01:54
		;;
	esac
}

_system_ram_free()		# [bytes]
{
	local option="$1"	# eval-hack OR flush
	local mem line

	case "$option" in
		'flush'|'flush_hard')
			case "$option" in
				'flush_hard')
					# will be restarted later via cron.minutely
					/etc/init.d/uhttpd stop
					/etc/init.d/dnsmasq stop
					/etc/init.d/dropbear stop

					[ -e '/etc/rc.common' -a ! -e "$TMPDIR/firmware_burn" ] && {
						. /etc/rc.common /etc/init.d/zram restart
					}
				;;
			esac

			# do not do on vpn-server
			[ -e '/proc/sys/vm/drop_caches' -a $OPENWRT_REV -gt 0 ] && {
				sync
				echo 3 >/proc/sys/vm/drop_caches
			}

			option=
		;;
	esac

	while read -r line; do {
		case "$line" in
			'MemAvailable:'*)
				# use this modern field, if available:
				# https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773
				explode $line
				mem=$(( ${2:-0} * 1024 ))
				break
			;;
			'MemFree:'*)
				explode $line
				mem=$2
			;;
			'Buffers:'*)
				# FIXME: why is 'mem' or '$2' sometimes empty? if this happens, WTF:
				# 1: 'Buffers:            3428 kB' 2: '' 3:'' 4: '' 5:'' 6: '' 7:''
				# IFS: '
				# '
				explode $line
				mem=$(( (${mem:-0} + ${2:-0}) * 1024 ))
				break
			;;
		esac
	} done </proc/meminfo

	echo "${option}${mem}"
}

_system_ram_size()		# [kBytes]
{
	local line

	while read -r line; do {
		case "$line" in
			'MemTotal:'*)
				explode $line
				echo "$2"
				return
			;;
		esac
	} done <'/proc/meminfo'
}

_system_adjust_coredump()
{
	local funcname='system_adjust_coredump'
	local file='/proc/sys/kernel/core_pattern'
	local pattern='/dev/null'
	local discname='coredumps'
	local rlimit_core

	# e.g. debugging disabled or on VPN-server (VPS)
	[ ! -e "$file" -o $OPENWRT_REV -eq 0 ] && return 0

	# TODO: limit single corefile size, otherwise we only see the 1st if there is a crash-cascade
	case "$CONFIG_PROFILE" in
		'liszt28'*)
			rlimit_core='2048k'
		;;
		*)
			if [ -n "$LOWMEM" ]; then
				rlimit_core=
			else
				rlimit_core='128k'
			fi
		;;
	esac

	[ -n "$rlimit_core" ] && {
		pattern="/$discname/%e.%p.%s.%t.core"
		_system add_ramdisc "$discname" "$rlimit_core" || pattern='/dev/null'

		grep -q "$pattern" "$file" || {
			_log it $funcname daemon info "writing '$pattern' to '$file'"
			echo "$pattern" >"$file"
		}
	}
}

_system_sysctl_tweaks()
{
	local funcname='system_sysctl_tweaks'
	local file='/proc/cmdline'
	local entry
	local min_free=1024

	# /proc/sys/vm/min_free_kbytes | is e.g. '466' in 16mb Linksys with kernel 3.14.26
	[ $( _system ram_size ) -lt 32768 ] && min_free=800

	# http://www.kernel.org/doc/Documentation/sysctl/kernel.txt
	# http://www.kernel.org/doc/Documentation/sysctl/vm.txt
	# /proc/sys/vm/panic_on_oom = 2
	# /proc/sys/kernel/panic_on_oops = 1
	# /proc/sys/kernel/panic = 10
	#
	# since r42046 till r44873 http://wiki.openwrt.org/doc/uci/firewall#nf_conntrack_skip_filter
	# net.netfilter.nf_conntrack_skip_filter=0
	for entry in	'vm.panic_on_oom=2' \
			'kernel.panic_on_oops=1' \
			'kernel.panic=10' \
			"vm.min_free_kbytes=$min_free" \
			'net.netfilter.nf_conntrack_skip_filter=0'; do {
		/sbin/sysctl -w "$entry" >/dev/null
		grep -q ^"$entry"$ '/etc/sysctl.conf' || {
			echo "$entry" >>'/etc/sysctl.conf'
		}
	} done

	# warn on VPN-server - add via: /etc/default/grub + update-grub
	grep -q ' oops=panic' "$file" || _log it $funcname daemon debug "missing 'oops=panic' in $file"
	grep -q ' panic=10'   "$file" || _log it $funcname daemon debug "missing 'panic=10' in $file"
}
