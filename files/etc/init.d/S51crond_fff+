#!/bin/sh /etc/rc.common

START=51 

func_cron_daemon_start ()
{
    . /tmp/loader
	local funcname="cron_daemon_start"

	[ -e /etc/init.d/cron ] && {					# fixme!
		_log it $funcname daemon info "removing unneeded initfile"
		rm /etc/init.d/cron
		killall crond
	}

	pidof crond >/dev/null && {
		_log it $funcname daemon debug "already started"
		return 1
	}

	/usr/sbin/crond -L /dev/null || {
		_log it $funcname daemon debug "error"
		return 1
	}

	_log it $funcname daemon info "[OK] started"
}

cron_watchdog()
{
    . /tmp/loader
	local func="cron_watchdog"
	local mode="$1"		# start|stop

	local interval_sec=60
	local cronpid watchdog_id
	local watchdog_id_file="/tmp/cron_watchdog.id"
	local watchdog_cronpid_file="/tmp/cron_watchdog.cronpid"
	local watchdog_pid_file="/tmp/cron_watchdog.pid"

	case "$mode" in
		start)
			cronpid="$( _system get_first_pid crond )"
			echo ${cronpid:=nonexistent} >"$watchdog_cronpid_file"

			_cron watchdog_is_running && {
				_log it $func daemon info "[OK] watchdog already exists, no need to start one"
				return
			}

			watchdog_id="$( _math random_integer 1 999999 )"
			echo $watchdog_id >"$watchdog_id_file"

			cat >/tmp/cron_watchdog.sh <<EOF
#!/bin/sh

logger -t $func -p daemon.info "checking each $interval_sec sec for crondpid $cronpid, see /tmp/cron_watchdog.sh"

while true; do {

	[ -z "\$FIRSTRUN" ] && {
		FIRSTRUN=0

		while [ "\$( date +%S )" != "55" ]; do sleep 1; done	# script should work, when its quiet...

		logger -t $func -p daemon.info "[OK] starting up with pid \$( cat $watchdog_pid_file )"
	}

	watchdog_id=$watchdog_id
	if [ -e /tmp/cron_watchdog_please_end_yourself_\$watchdog_id ]; then		# poor mens IPC
		rm /tmp/cron_watchdog_please_end_yourself_*
		. /tmp/loader
		_log it cron_watchdog daemon info "[OK] ending myself with ID \$watchdog_id"
		exit
	else
		read cronpid_to_watch <"$watchdog_cronpid_file"
		[ -d /proc/\${cronpid_to_watch:-nonexistent} ] || {
			. /tmp/loader
			_log it cron_watchdog daemon alert "no crond found, starting cron + watchdog"
			$0 start
			exit
		}
	fi

	sleep $interval_sec
} done &

echo \$! >$watchdog_pid_file
EOF
			sh /tmp/cron_watchdog.sh
		;;
		stop)
			if _cron watchdog_is_running ; then

				read watchdog_id <$watchdog_id_file

				[ -n "$watchdog_id" ] && {
					touch /tmp/cron_watchdog_please_end_yourself_$watchdog_id

					while [ -e /tmp/cron_watchdog_please_end_yourself_$watchdog_id ]; do {
						_log it cron_watchdog daemon debug "waiting for deletion of '/tmp/cron_watchdog_please_end_yourself_$watchdog_id'"
						sleep 10
					} done
				}

				_log it cron_watchdog daemon info "[OK] watchdog gone"
			else
				_log it cron_watchdog daemon info "[OK] watchdog was not active"
			fi

			rm /tmp/cron_watchdog.*
		;;
	esac
}

func_cron_daemon_stop ()
{
    . /tmp/loader
	local FUNC="cron_daemon_stop"
	
	pidof crond >/dev/null && {
		_log it $FUNC daemon info "killing"
		killall crond
		return
	}

	_log it $FUNC daemon debug "no daemon running"
}

func_cron_start ()
{
    . /tmp/loader
	func_cron_config_write $1
	func_cron_daemon_start && cron_watchdog start
}

func_cron_stop ()
{
    . /tmp/loader

	local option="$1"

	[ "$option" = "leave_watchdog" ] || cron_watchdog stop
	func_cron_daemon_stop
}

func_cron_status ()
{
    . /tmp/loader
	local FUNC="cron_status"
	
	pidof crond >/dev/null || {
		_log it $FUNC daemon debug "daemon is NOT running"
		return
	}
	
	_log it $FUNC daemon debug "daemon is running"
	func_cron_config_write status
}

func_cron_config_write ()
{
    . /tmp/loader
	local FUNC="cron_config_write"
	local CRONFILE="/etc/crontabs/root"
	local CRONDIR="$( dirname $CRONFILE )"
	local OWFS="$( which owfs >/dev/null && echo -n '-a owfs' )"
	local LINE
	local PROFILE="$1"

	[ "$PROFILE" = "status" ] && {
		_log it $FUNC daemon debug "status: '$CRONFILE'"
		cat $CRONFILE
		return
	}

	case "$CONFIG_PROFILE" in
		*)
			PROFILE="newstyle"
		;;
	esac

	  if [ "$PROFILE" = "newstyle" ]; then

		:

	elif [ "$PROFILE" = "lazy" ]; then

		:
	
	elif [ "$PROFILE" = "nano" ]; then
	  
	  	:
	
	elif [ "$PROFILE" != "minimal" ] && [ ! -e /tmp/LOWMEM ] && [ -z "$FAILSAFE" ] && [ -n "$WIFI_DEVS" ] && [ -e "/www/SOFTWARE_FULLY_INSTALLED" ]; then
	
		PROFILE="standard"
	else
		PROFILE="minimal"
	fi

	[ ! -d $CRONDIR ] && mkdir -p $CRONDIR

	local RUN_QUEUE=". /tmp/loader; _scheduler run"

	_log it $FUNC daemon debug "profile = $PROFILE"


	if [ "$PROFILE" = "minimal" ]; then

		echo >$CRONFILE "* * * * * /usr/bin/scheduler -S minimal; $RUN_QUEUE"

	elif [ "$PROFILE" = "lazy" ]; then

		echo >$CRONFILE "* * * * * /usr/bin/scheduler -S lazy; $RUN_QUEUE"

	elif [ "$PROFILE" = "newstyle" ]; then

		cp "/usr/sbin/cron.minutely" "/tmp/CRON_IS_CAREFUL"

		dont_need_wait_for_zero_ssh_action()
		{
			case "$CONFIG_PROFILE" in
				preskil*|ffweimar*|liszt28*|rehungen*)
					return 0
				;;
			esac

			[ $( _system ram_size ) -gt 16384 ] && return 0

			_net local_inet_offer >/dev/null && return 0

			return 1
		}

		dont_need_wait_for_zero_ssh_action && {
			sed -i 's/^.* REM$/#&/g' "/tmp/CRON_IS_CAREFUL"
		}

		if [ -e "/etc/init.d/apply_profile" ]; then
			# wait at least 10 minutes till first cron-action / simulate load
			sed -i 's|### WAIT_FOR_APPLY_PROFILE ###|[ ${UP%.*} -lt 600 ] \&\& LOAD=0.90|' "/tmp/CRON_IS_CAREFUL"
		else
			[ -e "/dev/video0" ] && {
				# motion, ffmpeg , kmod-video-core, kmod-video-xxx (e.g. uvc)
				cp /usr/sbin/cron.webcam /tmp
				sed -i 's|### CALL_WEBCAM ###|. /tmp/cron.webcam|' "/tmp/CRON_IS_CAREFUL"
			}
		fi

		[ $( _system ram_size ) -gt 16384 ] || {
			_log it $FUNC daemon info "lowram: be even more careful, dont work if load > 0.5"

			case "$CONFIG_PROFILE" in
				*)
					sed -i 's/0.8\*/0.8\*|0.7\*|0.6\*|0.5\*/' "/tmp/CRON_IS_CAREFUL"
				;;
			esac
		}

		case "$CONFIG_PROFILE" in
			ffweimar*)
				echo >$CRONFILE "* * * * * . /tmp/CRON_IS_CAREFUL; . /tmp/loader; _watch switch_linkstatus"
			;;
			*)
				echo >$CRONFILE "* * * * * . /tmp/CRON_IS_CAREFUL"
			;;
		esac
	fi

	while read LINE; do {
		_log it $FUNC daemon debug "+ '$LINE'"
	} done <$CRONFILE
}

case $1 in
	start)
		func_cron_start $2
	;;
	minimal)
		func_cron_start minimal
	;;
	stop)
		func_cron_stop	
	;;
	restart)
		func_cron_stop leave_watchdog
		func_cron_start $2
	;;
	status)
		func_cron_status
	;;
	*)
		echo "Usage: $0 (stop | start [nano|minimal|standard] | restart [...] | status)"
	;;
esac

