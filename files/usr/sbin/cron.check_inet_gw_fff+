#!/bin/sh
. /tmp/loader

# here we guess the gateway and write some info for fast including in "/tmp/GATEWAY_CHECK_RECENT"
# DATE=2011jan24_11:15; GATEWAY_HOSTNAME=ejbw-mesh-dhcp-99.olsr; COST_INT=1000; GATEWAY=10.10.99.33; NEXTHOP=192.168.100.22; METRIC=1

if _olsr uptime is_short; then
	_log it olsr_uptime_is_short daemon info "[OK] scheduling job"
	echo >>$SCHEDULER "$0"
	exit 0
else
	[ -d '/tmp/OLSR' ] || exit 0
fi

if [ -e "/tmp/CHECK_INET_OFFER" ]; then
	if _file age "/tmp/CHECK_INET_OFFER" -gt 3600 ; then
		_log it lockfile daemon alert "ignoring old lockfile"
	else
		_log it lockfile daemon info "ignoring call, found lockfile '/tmp/CHECK_INET_OFFER'"
		exit 1
	fi
else
	touch "/tmp/CHECK_INET_OFFER"
fi

# first, get a list of all HNA4 0.0.0.0/0 = gateway offers
# LIST_HNA4="10.63.8.1 10.63.9.1 ..."
# output routes and compare which of these are gateways,
# output them and sort by cost, lowest on top

LIST_GATEWAYS="$( neigh gateways )"
MINCOST=99999
OUT=

FILE_OLSR_ROUTES="/tmp/olsr_output_recent_routesonly_$$"
LINESTART="$( grep -n ^'Table: Routes'$ '/tmp/OLSR/ALL' | cut -d':' -f1 )"
sed -n "$(( LINESTART + 2 )),999999p" '/tmp/OLSR/ALL' >"$FILE_OLSR_ROUTES"

while read -r LINE; do {
	explode ${LINE:-dummy}
	GATEWAY="$1"		# is "$IP/32"
	NEXTHOP="$2"
	METRIC="$3"
	COST="$4"

	for IP in $LIST_GATEWAYS; do {
		[ "$IP/32" = "$GATEWAY" ] && {
			if [ "${COST%.*}" = "0" ]; then			# 0.100 -> 100
				COST_INT="${COST#*.}"
			else						# 2.345 -> 2345
				COST_INT="${COST%.*}${COST#*.}"
			fi

			[ $COST_INT -lt $MINCOST ] && {
				_ipsystem get "$NEXTHOP" >/dev/null || {
					# e.g. ejbw = 192.168.111.183 -> 10.10.50.33
					# or ibfleesensee = 10.99.201.1 (olsr over VLANs)
					explode $( sed -n '/Table: MID/,/Table: Routes/ p' '/tmp/OLSR/ALL' | grep -F "$NEXTHOP" )
					NEXTHOP="$1"
				}

				# do not take VPN-server into account (it announces HNA4 0/0)
				NEXTHOP_NODENUMBER="$( _ipsystem get "$NEXTHOP" )"
				NEXTHOP_VPNIP="$( _ipsystem getvar 'WIFIVPNSERVERADR' "$NEXTHOP_NODENUMBER" )"
				[ "$NEXTHOP_VPNIP" = "$NEXTHOP" ] || {
					MINCOST="$COST_INT"
					OUT="COST_INT=$COST_INT; GATEWAY=$IP; NEXTHOP=$NEXTHOP; METRIC=$METRIC"
				}
			}
		}
	} done	
} done <"$FILE_OLSR_ROUTES"
rm "$FILE_OLSR_ROUTES"

[ -z "$OUT" ] && {
	# default dev venet0  scope link
	# default via 217.0.116.253 dev pppoe-wan  proto static
	GW="$( grep ^'default' '/tmp/OLSR/ROUTING_TABLE_MAIN' | head -n1 )"
	explode $GW

	if _net dev_is_valid "$3"; then
		GW="$( _net dev2ip "$3" 'ip_but_noloopback' )"
	else
		GW="$( _sanitizer run "$GW" 'ip4' )"
	fi

	if [ "$GW" = "$WANADR" -o "$GW" = "$LANADR" ]; then
		# metric = 0 ! (is in own subnet, without a router intermediate - so we take wifiaddress
		OUT="COST_INT=1; GATEWAY=$ANYADR; NEXTHOP=$ANYADR; METRIC=0"
	elif [ -z "$GW" ]; then
		read -r LAST_GATEWAY </tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY
		# really no gateway, so we set cost ~INFINITE, invalid nexthop,
		# but OLD gateway - so olsr_plausi_check() should not reboot the box
		# and enforce soon a next test

		OUT="COST_INT=99999; GATEWAY=${LAST_GATEWAY}; NEXTHOP=127.0.0.0; METRIC=-1"

		_log it guess_gateway daemon info "empty default route, last inet-gateway was: $LAST_GATEWAY"
		echo >>$SCHEDULER "$0"
	else
		if [ $( _system uptime min ) -le 10 ]; then
			LOGPRIO="info"
		else
			LOGPRIO="alert"
		fi

		# provider-lan with subnet >/21 is not implemented yet (see /etc/init.d/S43...)
		if   [ "$WIFIADR" = "$GW" ]; then
			_log it guess_gateway daemon $LOGPRIO "strange situation1: olsr-nexthop != routing-table nexthop: $WIFIADR/$GW"
			OUT="COST_INT=10; GATEWAY=$WIFIADR; NEXTHOP=$WIFIADR; METRIC=0"
		elif [ -e "/tmp/OLSR/DEFGW_$GW" ]; then
			# FIXME! happens with wan-inet-offer over e.g. 192.168.x.x
			_log it guess_gateway daemon info "strange situation3: nexthop is defaultgw"
			OUT="COST_INT=10; GATEWAY=$ANYADR; NEXTHOP=$ANYADR; METRIC=0"
		else
			if [ -e "/tmp/$( basename $0 )_first_error" ]; then
				OUT="COST_INT=10; GATEWAY=$ANYADR; NEXTHOP=$ANYADR; METRIC=0"

				if uci -q get network.@alias[0].gateway >/dev/null; then
					:
					# lan-inet-offer: fixme!
				else
					bool_true 'olsrd.@meta[0].no_watching' || {
						[ "$( uci -q get network.mybridge.gateway )" = "${GW:-nogw}" ] || {
							_log it guess_gateway daemon $LOGPRIO "strange situation2: olsr-nexthop != routing-table nexthop: $ANYADR/$GW"
							[ "$LOGPRIO" = "alert" ] && _olsr daemon restart "gateway: $GW nexthop: $ANYADR"

							/etc/init.d/S43ethers_fff+ build_network_clients
						}
					}
				fi
			else
				touch "/tmp/$( basename $0 )_first_error"
			fi
		fi
	fi
}

eval $OUT	# GATEWAY
GATEWAY="$( _sanitizer run "$GATEWAY" ip4 )"	# this is safer, we have seen something like "10.10.27.33/32" for output...

[ -e '/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY' ] || FIRST_RUN='true'

echo "$COST_INT" >'/tmp/GATEWAY_CHECK_RECENT_COSTINT_ONLY'
echo "$GATEWAY"  >'/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY'
echo "$NEXTHOP"  >'/tmp/GATEWAY_CHECK_RECENT_NEXTHOP_IP_ONLY'

echo "DATE=$( _system date humanreadable ); GATEWAY_HOSTNAME=$( _net ip2dns "$GATEWAY" ); $OUT" >'/tmp/GATEWAY_CHECK_RECENT'

_log it guess_gateway daemon debug "$OUT"

rm "/tmp/CHECK_INET_OFFER"
