#!/bin/sh

# here we will our work-queue by writing tasks
# into $SCHEDULER and $SCHEDULER_IMPORTANT - and it should
# run as fast as possible. this file is sourced each minute
# from cron and later executed from '_scheduler run'

# MINUTE = 00...59
# HOUR   = 00...23
MINUTE=;HOUR=;WEEKDAY=;DAYOFMONTH=;UNIXTIME=
eval $( date '+MINUTE=%M; HOUR=%H; WEEKDAY=%A; DAYOFMONTH=%d; UNIXTIME=%s;' )

. /tmp/loader
[ -z "$UP" ] && read -r UP REST </proc/uptime		# normally done during cron.minutely

if [ -e "$TMPDIR/firstrun" ]; then
	# do nothing
else
	touch "$TMPDIR/firstrun"

	# jobs directly after bootup
	cat >>$SCHEDULER <<EOF
_watch flash_free_space
_ssh sanitize_and_cleanup_keys
/usr/sbin/cron.check_inet_gw_fff+
EOF
fi

cat >>$SCHEDULER <<EOF
_watch wifistuff
_watch olsrstuff
_wifi watch_phy_problems
_watch roaming
_watch switch_linkstatus
/usr/sbin/cron.check_vtun_status
EOF

# uptime.sec->minutes divideable (without rest) by 360? -> each 360 mins
[ $(( $(( ${UP%.*} / 60 )) % 360 )) -eq 0 ] && {
	echo '_olsr incoming_and_outgoing_olsr_traffic'
} >>$SCHEDULER

case "$HOUR:$MINUTE" in
	04:00)
		{
			echo '_watch archivsize "/tmp/messages" 5000'	# e.g. VPN-server
			echo "_watch archivsize '$PERMLOG' 400 500"
			echo '_wifi longshot_report'
			echo '_net roaming_eventlistener restart'
		} >>$SCHEDULER

		if bool_true 'system.@system[0].avoid_autoreboot'; then
			{
				# housekeeping stuff
				echo '/etc/init.d/override_uci_vars boot'
				echo '_netparam check'
				echo '_net arp_reset'
			} >>$SCHEDULER
		else
			# do not make serious action, when we are not sure if time is correct
			_ntp set is_unset || {
				echo '_netfilter stop remember_over_reboot'
				echo '_netfilter ipforwarding_start'
				echo '_netfilter masquerade_start'
				echo '_log sleep collecting_userdata_from_all_nodes 300 step 30'
				echo '_watch reanimate_dead_neighbour'
				echo '_system reboot_safe nightly_reboot'
			} >>$SCHEDULER
		fi
	;;
	05:00)
		rm "$TMPDIR/wifi_scan_geolocation" 2>/dev/null
	;;
esac

case "$MINUTE" in
	00|15|30|45)
		case "$MINUTE" in
			00)	# hourly
				{
					echo '_net roaming_fetch_cache'
					echo "_watch wifi_cronactive $HOUR $MINUTE"
					echo '_olsr neighs_meshrdf_evalable >/tmp/OLSR/meshrdf_neighs'
					echo '_wifi scan_geolocation'
					echo '_wifi longshot_name && _rrd upload'
				} >>$SCHEDULER
			;;
			*)
				owm.lua
			;;
		esac

		cat >>$SCHEDULER <<EOF
/usr/sbin/cron.check_inet_gw_fff+
_watch wifi_mode
_watch hanging_command usual_suspects
_watch flash_free_space
_watch system_time
_watch random_node_id
_watch dhcp_space
_net refresh_dnshosts
_net roaming_cleanup_cache
EOF
	;;
esac
