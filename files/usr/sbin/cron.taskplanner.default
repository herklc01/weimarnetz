#!/bin/sh

# here we will our work-queue by writing tasks
# into $SCHEDULER and $SCHEDULER_IMPORTANT - and it should
# run as fast as possible. this file is sourced each minute
# from cron and later executed from '_scheduler run'

# MINUTE = 00...59
# HOUR   = 00...23
MINUTE=;HOUR=;WEEKDAY=;DAYOFMONTH=;UNIXTIME=
eval $( date '+MINUTE=%M; HOUR=%H; WEEKDAY=%A; DAYOFMONTH=%d; UNIXTIME=%s;' )

. /tmp/loader
[ -z "$UP" ] && read -r UP REST </proc/uptime		# normally done during cron.minutely

if [ -e "$TMPDIR/firstrun" ]; then
	# nope
else
	touch "$TMPDIR/firstrun"

	# jobs directly after bootup
	cat >>$SCHEDULER <<EOF
_watch flash_free_space
_ssh sanitize_and_cleanup_keys
/usr/sbin/cron.check_inet_gw_fff+
EOF
fi

cat >>$SCHEDULER <<EOF
_watch wifistuff
_watch olsrstuff
_wifi watch_phy_problems
_watch switch_linkstatus
/usr/sbin/cron.check_vtun_status
EOF

# uptime.sec->minutes divideable (without rest) by 360? -> each 360 mins
[ $(( $(( ${UP%.*} / 60 )) % 360 )) -eq 0 ] && {
	echo '_olsr incoming_and_outgoing_olsr_traffic'
} >>$SCHEDULER

case "$HOUR:$MINUTE" in
	17:00)
#		echo >>$SCHEDULER_IMPORTANT '_wifi longshot_test 17:10:00 36...40 "719 670" >/www/BLUBB'
	;;
	04:00)
		{
			echo '_watch archivsize "/tmp/messages" 5000'	# e.g. VPN-server
			echo "_watch archivsize '$PERMLOG' 400 500"
		} >>$SCHEDULER

		_ntp set is_unset || {
			echo '_system reboot_safe nightly_reboot'
		} >>$SCHEDULER
	;;
	05:00)
		rm "$TMPDIR/wifi_scan_geolocation" 2>/dev/null
	;;
esac

case "$MINUTE" in
	00|15|30|45)
		case "$MINUTE" in
			*)
				owm.lua
			;;
		esac
		cat >>$SCHEDULER <<EOF
/usr/sbin/cron.check_inet_gw_fff+
_watch wifi_mode
_watch hanging_command usual_suspects
_watch flash_free_space
_watch system_time
_watch random_node_id
_watch dhcp_space
_net refresh_dnshosts
EOF
esac
