#!/bin/sh
. /tmp/loader

nexthop()
{
	_sanitizer run "$( ip route list exact '0.0.0.0/0' table main | head -n1 )" ip4
}

nexthop_dev_iswired()
{
	case "$( ip route list exact '0.0.0.0/0' table main | head -n1 )" in
		*" dev $LANDEV "*)
			echo "$LANDEV"
		;;
		*" dev $WANDEV "*)
			echo "$WANDEV"
		;;
		*)
			return 1
		;;
	esac
}

ask_for_slave()
{
	local funcname="ask_for_slave"
	local netaddr netmask answer url nexthop_ip

	netaddr="$( uci get olsrd.@Hna4[0].netaddr )"		# 10.63.4.0
	netmask="$( uci get olsrd.@Hna4[0].netmask )"
	netmask="$( _net mask2cidr "$netmask" )"		# 26
	nexthop_ip="$( nexthop )"

	url="http://$nexthop_ip/cgi-bin-olsr-hna-slave.sh"
	url="${url}?netaddr=$netaddr"
	url="${url}&netmask=$netmask"
	url="${url}&version=$FFF_PLUS_VERSION"			# e.g. 383725
	bool_true 'olsrd.@meta[0].hnaslave_dirty' && url="${url}&mode=dirty"

	answer="$( _curl it "$url" )"
	_log it $funcname daemon info "$url -> '$answer'"

	case "$answer" in
		'NEVER')
			uci set olsrd.@meta[0].hnaslave='false'
		;;
		"OK "*)
			echo "$answer"
			return 0
		;;
	esac

	return 1
}

olsr_on_wifi_configured()
{
	local i j name

	for j in 0 1 2 3; do {
		name="$( uci get "wireless.@wifi-iface[$j].network" )"	# e.g. wlan
		[ -z "$name" ] && continue

		for i in 0 1 2 3; do {
			case "$( uci get "olsrd.@Interface[$i].interface" )" in
				*"$name"*)
					return 0
				;;
			esac
		} done
	} done

	return 1
}

check_special_condition()
{
	local condition condition_nexthop condition_mode condition_good
	local nexthop="$( nexthop )"

	# e.g. '2 ap'
	condition="$( uci -q get 'olsrd.@meta[0].hnaslave_condition' )" && {
		condition_nexthop="${condition% *}"
		condition_mode="${condition#* }"
		condition_good='false'

		# TODO: check all devs?
		case "$( _wifi mode "$WIFIDEV" )" in
			"$condition_mode")
				[ "$( _ipsystem get "$nexthop" )" = "$condition_nexthop" ] && {
					condition_good='true'
				}
			;;
		esac

		# authserver = me?
		[ "$( _weblogin authserver )" = "$LANADR" ] && condition_good=

		# olsr on 2 wired interfaces? see olsr_build_tables()
		[ -e "/tmp/OLSR/goodping_$LANDEV" -a -e "/tmp/OLSR/goodping_$WANDEV" ] && condition_good=

		[ "$condition_good" = 'true' ] || return 1

		# logprio for next function
		echo 'info'
	}

	return 0
}

stop_olsr_and_set_static_routes()
{
	local funcname='stop_olsr_and_set_static_routes'
	local check_ip="$1"
	local logprio="${2:-alert}"
	local nexthop="$( nexthop )"
	local nexthop_dev="$( nexthop_dev_iswired )"

	check_ip="$( echo "$check_ip" | cut -d' ' -f2 )"	# 'OK 10.63.14.25' -> 10.63.14.25
	_sanitizer run "$check_ip" ip4 check || return 1
	# better test an IP which is not linklocal
	echo "$nexthop" >"/tmp/OLSR_HNA_SLAVE_PINGTEST"

	WIFI_DHCP_PRE="$( _ipsystem getvar 'WIFI_DHCP_PRE' )"
	WIFIMSK="$( _net cidr2mask "$WIFI_DHCP_PRE" )"

	ip route add default via $nexthop dev $nexthop_dev metric 1 onlink
	ip address add $WIFIADR/$WIFIMSK dev $WIFIDEV || {
		# add e.g. /28
		_log it $funcname daemon $logprio "failed to add $WIFIADR/$WIFIMSK dev $WIFIDEV"
	}

	ip address del $WIFIADR/$WIFIPRE dev $WIFIDEV || {
		# del e.g. /8
		_log it $funcname daemon $logprio "failed to del $WIFIADR/$WIFIPRE dev $WIFIDEV"
	}

	uci set network.wlan.netmask="$WIFIMSK"		# if something makes 'wifi up'

	ip route flush cache
	ip -oneline route get "$nexthop" | grep -Fq " dev $nexthop_dev " || {
		_system reboot_safe "route goes out over wrong device"
	}

	# FIXME! (always NAT, even if local)
	$IPT -t nat -I 'NAT_ALIEN_ROAMERS' -s "$ROAMING_NET/$ROAMING_PRE" ! -d "$ROAMING_NET/$ROAMING_PRE" -j MASQUERADE

	uci set olsrd.@meta[0].no_watching='true'
	_olsr daemon stop "i'am now a hna4-slave from $( nexthop )"
}

neigh_info_written()
{
	test -e '/tmp/OLSR/meshrdf_neighs'
}

local_hna4inet_announce()
{
	local i

	for i in 0 1 2 3; do {
		case "$( uci -q get "olsrd.@Hna4[$i].netaddr" )" in
			'0.0.0.0')
				return 0
			;;
		esac
	} done

	return 1
}

looks_good()
{
	olsr_on_wifi_configured			&& return 1
	local_hna4inet_announce			&& return 1
	nexthop_dev_iswired >/dev/null		|| return 1
	pidof olsrd >/dev/null			|| return 1
	[ $( _olsr uptime sec ) -gt 600 ]	|| return 1
	_net local_inet_offer >/dev/null	&& return 1
	neigh_info_written			|| return 1
	check_special_condition >/dev/null
}

looks_good && {
	LOGPRIO="$( check_special_condition )"
	stop_olsr_and_set_static_routes "$( ask_for_slave )" "$LOGPRIO"
}
